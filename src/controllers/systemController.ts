/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  AuditLogRequest,
  auditLogRequestSchema,
} from '../models/auditLogRequest';
import {
  AuditLogResponse,
  auditLogResponseSchema,
} from '../models/auditLogResponse';
import {
  AuditLogSearchRequest,
  auditLogSearchRequestSchema,
} from '../models/auditLogSearchRequest';
import {
  AuditLogSearchResponse,
  auditLogSearchResponseSchema,
} from '../models/auditLogSearchResponse';
import {
  EventLogResponse,
  eventLogResponseSchema,
} from '../models/eventLogResponse';
import {
  EventLogSearchRequest,
  eventLogSearchRequestSchema,
} from '../models/eventLogSearchRequest';
import {
  EventLogSearchResponse,
  eventLogSearchResponseSchema,
} from '../models/eventLogSearchResponse';
import {
  LoginRecordSearchRequest,
  loginRecordSearchRequestSchema,
} from '../models/loginRecordSearchRequest';
import {
  LoginRecordSearchResponse,
  loginRecordSearchResponseSchema,
} from '../models/loginRecordSearchResponse';
import { ReindexRequest, reindexRequestSchema } from '../models/reindexRequest';
import {
  VersionResponse,
  versionResponseSchema,
} from '../models/versionResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SystemController extends BaseController {
  /**
   * Retrieves a single audit log for the given Id.
   *
   * @param auditLogId The Id of the audit log to retrieve.
   * @return Response from the API call
   */
  async retrieveAuditLog(
    auditLogId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuditLogResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ auditLogId: [auditLogId, string()] });
    req.appendTemplatePath`/api/system/audit-log/${mapped.auditLogId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(auditLogResponseSchema, requestOptions);
  }

  /**
   * Retrieves a single event log for the given Id.
   *
   * @param eventLogId The Id of the event log to retrieve.
   * @return Response from the API call
   */
  async retrieveEventLog(
    eventLogId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EventLogResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ eventLogId: [eventLogId, string()] });
    req.appendTemplatePath`/api/system/event-log/${mapped.eventLogId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(eventLogResponseSchema, requestOptions);
  }

  /**
   * Searches the event logs with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchEventLogs(
    body?: EventLogSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EventLogSearchResponse>> {
    const req = this.createRequest('POST', '/api/system/event-log/search');
    const mapped = req.prepareArgs({
      body: [body, optional(eventLogSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(eventLogSearchResponseSchema, requestOptions);
  }

  /**
   * Creates an audit log with the message and user name (usually an email). Audit logs should be written
   * anytime you make changes to the FusionAuth database. When using the FusionAuth App web interface,
   * any changes are automatically written to the audit log. However, if you are accessing the API, you
   * must write the audit logs yourself.
   *
   * @param body
   * @return Response from the API call
   */
  async createAuditLog(
    body?: AuditLogRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuditLogResponse>> {
    const req = this.createRequest('POST', '/api/system/audit-log');
    const mapped = req.prepareArgs({
      body: [body, optional(auditLogRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(auditLogResponseSchema, requestOptions);
  }

  /**
   * Searches the audit logs with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchAuditLogs(
    body?: AuditLogSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuditLogSearchResponse>> {
    const req = this.createRequest('POST', '/api/system/audit-log/search');
    const mapped = req.prepareArgs({
      body: [body, optional(auditLogSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(auditLogSearchResponseSchema, requestOptions);
  }

  /**
   * Searches the login records with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchLoginRecords(
    body?: LoginRecordSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LoginRecordSearchResponse>> {
    const req = this.createRequest('POST', '/api/system/login-record/search');
    const mapped = req.prepareArgs({
      body: [body, optional(loginRecordSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(loginRecordSearchResponseSchema, requestOptions);
  }

  /**
   * Requests Elasticsearch to delete and rebuild the index for FusionAuth users or entities. Be very
   * careful when running this request as it will  increase the CPU and I/O load on your database until
   * the operation completes. Generally speaking you do not ever need to run this operation unless
   * instructed by FusionAuth support, or if you are migrating a database another system and you are not
   * brining along the Elasticsearch index.   You have been warned.
   *
   * @param body
   * @return Response from the API call
   */
  async reindex(
    body?: ReindexRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/api/system/reindex');
    const mapped = req.prepareArgs({
      body: [body, optional(reindexRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Retrieves the FusionAuth version string.
   *
   * @return Response from the API call
   */
  async retrieveVersion(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VersionResponse>> {
    const req = this.createRequest('GET', '/api/system/version');
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(versionResponseSchema, requestOptions);
  }
}
