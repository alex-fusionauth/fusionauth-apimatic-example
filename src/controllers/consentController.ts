/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import { ConsentRequest, consentRequestSchema } from '../models/consentRequest';
import {
  ConsentResponse,
  consentResponseSchema,
} from '../models/consentResponse';
import {
  ConsentSearchRequest,
  consentSearchRequestSchema,
} from '../models/consentSearchRequest';
import {
  ConsentSearchResponse,
  consentSearchResponseSchema,
} from '../models/consentSearchResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ConsentController extends BaseController {
  /**
   * Deletes the consent for the given Id.
   *
   * @param consentId             The Id of the consent to delete.
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope this API request. Only required
   *                                        when there is more than one tenant and the API key is not tenant-scoped.
   * @return Response from the API call
   */
  async deleteConsent(
    consentId: string,
    xFusionAuthTenantId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      consentId: [consentId, string()],
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
    });
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.appendTemplatePath`/api/consent/${mapped.consentId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Retrieves the Consent for the given Id.
   *
   * @param consentId             The Id of the consent.
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope this API request. Only required
   *                                        when there is more than one tenant and the API key is not tenant-scoped.
   * @return Response from the API call
   */
  async retrieveConsent(
    consentId: string,
    xFusionAuthTenantId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConsentResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consentId: [consentId, string()],
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
    });
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.appendTemplatePath`/api/consent/${mapped.consentId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(consentResponseSchema, requestOptions);
  }

  /**
   * Searches consents with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchConsents(
    body?: ConsentSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConsentSearchResponse>> {
    const req = this.createRequest('POST', '/api/consent/search');
    const mapped = req.prepareArgs({
      body: [body, optional(consentSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(consentSearchResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the consent.
   *
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope this API request. Only required
   *                                        when there is more than one tenant and the API key is not tenant-scoped.
   * @return Response from the API call
   */
  async retrieveConsents(
    xFusionAuthTenantId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConsentResponse>> {
    const req = this.createRequest('GET', '/api/consent');
    const mapped = req.prepareArgs({
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
    });
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(consentResponseSchema, requestOptions);
  }

  /**
   * Creates a user consent type. You can optionally specify an Id for the consent type, if not provided
   * one will be generated.
   *
   * @param consentId             (Optional) The Id for the consent. If not provided a secure
   *                                                       random UUID will be generated.
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope this API request.
   *                                                       Only required when there is more than one tenant and the API
   *                                                       key is not tenant-scoped.
   * @param body
   * @return Response from the API call
   */
  async createConsent(
    consentId: string,
    xFusionAuthTenantId?: string,
    body?: ConsentRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConsentResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      consentId: [consentId, string()],
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
      body: [body, optional(consentRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.json(mapped.body);
    req.appendTemplatePath`/api/consent/${mapped.consentId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(consentResponseSchema, requestOptions);
  }

  /**
   * Updates, via PATCH, the consent with the given Id.
   *
   * @param consentId             The Id of the consent to update.
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope this API request.
   *                                                       Only required when there is more than one tenant and the API
   *                                                       key is not tenant-scoped.
   * @param body
   * @return Response from the API call
   */
  async patchConsent(
    consentId: string,
    xFusionAuthTenantId?: string,
    body?: ConsentRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConsentResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      consentId: [consentId, string()],
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
      body: [body, optional(consentRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.json(mapped.body);
    req.appendTemplatePath`/api/consent/${mapped.consentId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(consentResponseSchema, requestOptions);
  }

  /**
   * Updates the consent with the given Id.
   *
   * @param consentId             The Id of the consent to update.
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope this API request.
   *                                                       Only required when there is more than one tenant and the API
   *                                                       key is not tenant-scoped.
   * @param body
   * @return Response from the API call
   */
  async updateConsent(
    consentId: string,
    xFusionAuthTenantId?: string,
    body?: ConsentRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConsentResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      consentId: [consentId, string()],
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
      body: [body, optional(consentRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.json(mapped.body);
    req.appendTemplatePath`/api/consent/${mapped.consentId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(consentResponseSchema, requestOptions);
  }
}
