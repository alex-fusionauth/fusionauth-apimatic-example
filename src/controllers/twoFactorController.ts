/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import { LoginResponse, loginResponseSchema } from '../models/loginResponse';
import { SecretResponse, secretResponseSchema } from '../models/secretResponse';
import {
  TwoFactorLoginRequest,
  twoFactorLoginRequestSchema,
} from '../models/twoFactorLoginRequest';
import {
  TwoFactorSendRequest,
  twoFactorSendRequestSchema,
} from '../models/twoFactorSendRequest';
import {
  TwoFactorStartRequest,
  twoFactorStartRequestSchema,
} from '../models/twoFactorStartRequest';
import {
  TwoFactorStartResponse,
  twoFactorStartResponseSchema,
} from '../models/twoFactorStartResponse';
import {
  TwoFactorStatusResponse,
  twoFactorStatusResponseSchema,
} from '../models/twoFactorStatusResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class TwoFactorController extends BaseController {
  /**
   * Retrieve a user's two-factor status.  This can be used to see if a user will need to complete a two-
   * factor challenge to complete a login, and optionally identify the state of the two-factor trust
   * across various applications.
   *
   * @param twoFactorTrustId The optional two-factor trust Id to verify.
   * @param userId           The user Id to retrieve the Two-Factor status.
   * @param applicationId    The optional applicationId to verify.
   * @return Response from the API call
   */
  async retrieveTwoFactorStatus(
    twoFactorTrustId: string,
    userId?: string,
    applicationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TwoFactorStatusResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      twoFactorTrustId: [twoFactorTrustId, string()],
      userId: [userId, optional(string())],
      applicationId: [applicationId, optional(string())],
    });
    req.query('userId', mapped.userId);
    req.query('applicationId', mapped.applicationId);
    req.appendTemplatePath`/api/two-factor/status/${mapped.twoFactorTrustId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(twoFactorStatusResponseSchema, requestOptions);
  }

  /**
   * Start a Two-Factor login request by generating a two-factor identifier. This code can then be sent
   * to the Two Factor Send  API (/api/two-factor/send)in order to send a one-time use code to a user.
   * You can also use one-time use code returned  to send the code out-of-band. The Two-Factor login is
   * completed by making a request to the Two-Factor Login  API (/api/two-factor/login). with the two-
   * factor identifier and the one-time use code.  This API is intended to allow you to begin a Two-
   * Factor login outside a normal login that originated from the Login API (/api/login).
   *
   * @param body
   * @return Response from the API call
   */
  async startTwoFactorLogin(
    body?: TwoFactorStartRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TwoFactorStartResponse>> {
    const req = this.createRequest('POST', '/api/two-factor/start');
    const mapped = req.prepareArgs({
      body: [body, optional(twoFactorStartRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(twoFactorStartResponseSchema, requestOptions);
  }

  /**
   * Complete login using a 2FA challenge
   *
   * @param body
   * @return Response from the API call
   */
  async twoFactorLogin(
    body?: TwoFactorLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LoginResponse>> {
    const req = this.createRequest('POST', '/api/two-factor/login');
    const mapped = req.prepareArgs({
      body: [body, optional(twoFactorLoginRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(loginResponseSchema, requestOptions);
  }

  /**
   * Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
   *
   * @param body
   * @return Response from the API call
   */
  async sendTwoFactorCodeForEnableDisable(
    body?: TwoFactorSendRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/api/two-factor/send');
    const mapped = req.prepareArgs({
      body: [body, optional(twoFactorSendRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The
   * response will contain both the secret and a Base32 encoded form of the secret which can be shown to
   * a User when using a 2 Step Authentication application such as Google Authenticator.
   *
   * @return Response from the API call
   */
  async generateTwoFactorSecretUsingJWT(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SecretResponse>> {
    const req = this.createRequest('GET', '/api/two-factor/secret');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(secretResponseSchema, requestOptions);
  }

  /**
   * Send a Two Factor authentication code to allow the completion of Two Factor authentication.
   *
   * @param twoFactorId  The Id returned by the Login API necessary to complete Two
   *                                                    Factor authentication.
   * @param body
   * @return Response from the API call
   */
  async sendTwoFactorCodeForLoginUsingMethod(
    twoFactorId: string,
    body?: TwoFactorSendRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      twoFactorId: [twoFactorId, string()],
      body: [body, optional(twoFactorSendRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/two-factor/send/${mapped.twoFactorId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }
}
