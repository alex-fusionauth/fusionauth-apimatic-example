/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  UserActionReasonRequest,
  userActionReasonRequestSchema,
} from '../models/userActionReasonRequest';
import {
  UserActionReasonResponse,
  userActionReasonResponseSchema,
} from '../models/userActionReasonResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class UserActionReasonController extends BaseController {
  /**
   * Creates a user reason. This user action reason cannot be used when actioning a user until this call
   * completes successfully. Anytime after that the user action reason can be used.
   *
   * @param userActionReasonId (Optional) The Id for the user action reason. If not
   *                                                             provided a secure random UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createUserActionReason(
    userActionReasonId: string,
    body?: UserActionReasonRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserActionReasonResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      userActionReasonId: [userActionReasonId, string()],
      body: [body, optional(userActionReasonRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/user-action-reason/${mapped.userActionReasonId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(userActionReasonResponseSchema, requestOptions);
  }

  /**
   * Deletes the user action reason for the given Id.
   *
   * @param userActionReasonId The Id of the user action reason to delete.
   * @return Response from the API call
   */
  async deleteUserActionReason(
    userActionReasonId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      userActionReasonId: [userActionReasonId, string()],
    });
    req.appendTemplatePath`/api/user-action-reason/${mapped.userActionReasonId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Retrieves the user action reason for the given Id. If you pass in null for the id, this will return
   * all the user action reasons.
   *
   * @param userActionReasonId (Optional) The Id of the user action reason.
   * @return Response from the API call
   */
  async retrieveUserActionReason(
    userActionReasonId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserActionReasonResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      userActionReasonId: [userActionReasonId, string()],
    });
    req.appendTemplatePath`/api/user-action-reason/${mapped.userActionReasonId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(userActionReasonResponseSchema, requestOptions);
  }

  /**
   * Updates, via PATCH, the user action reason with the given Id.
   *
   * @param userActionReasonId The Id of the user action reason to update.
   * @param body
   * @return Response from the API call
   */
  async patchUserActionReason(
    userActionReasonId: string,
    body?: UserActionReasonRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserActionReasonResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      userActionReasonId: [userActionReasonId, string()],
      body: [body, optional(userActionReasonRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/user-action-reason/${mapped.userActionReasonId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(userActionReasonResponseSchema, requestOptions);
  }

  /**
   * Updates the user action reason with the given Id.
   *
   * @param userActionReasonId The Id of the user action reason to update.
   * @param body
   * @return Response from the API call
   */
  async updateUserActionReason(
    userActionReasonId: string,
    body?: UserActionReasonRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserActionReasonResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      userActionReasonId: [userActionReasonId, string()],
      body: [body, optional(userActionReasonRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/user-action-reason/${mapped.userActionReasonId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(userActionReasonResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the user action reasons.
   *
   * @return Response from the API call
   */
  async retrieveUserActionReasons(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UserActionReasonResponse>> {
    const req = this.createRequest('GET', '/api/user-action-reason');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(userActionReasonResponseSchema, requestOptions);
  }
}
