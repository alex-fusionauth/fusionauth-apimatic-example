/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { LogoutRequest, logoutRequestSchema } from '../models/logoutRequest';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class LogoutController extends BaseController {
  /**
   * The Logout API is intended to be used to remove the refresh token and access token cookies if they
   * exist on the client and revoke the refresh token stored. This API takes the refresh token in the
   * JSON body. OR The Logout API is intended to be used to remove the refresh token and access token
   * cookies if they exist on the client and revoke the refresh token stored. This API does nothing if
   * the request does not contain an access token or refresh token cookies.
   *
   * @param global       When this value is set to true all the refresh tokens issued to the
   *                                             owner of the provided token will be revoked.
   * @param refreshToken (Optional) The refresh_token as a request parameter instead of coming
   *                                             in via a cookie. If provided this takes precedence over the cookie.
   * @param body
   * @return Response from the API call
   */
  async createLogoutlogoutlogoutWithRequest(
    global?: string,
    refreshToken?: string,
    body?: LogoutRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/api/logout');
    const mapped = req.prepareArgs({
      global: [global, optional(string())],
      refreshToken: [refreshToken, optional(string())],
      body: [body, optional(logoutRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.query('global', mapped.global);
    req.query('refreshToken', mapped.refreshToken);
    req.json(mapped.body);
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }
}
