/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  SystemConfigurationRequest,
  systemConfigurationRequestSchema,
} from '../models/systemConfigurationRequest';
import {
  SystemConfigurationResponse,
  systemConfigurationResponseSchema,
} from '../models/systemConfigurationResponse';
import { optional } from '../schema';
import { BaseController } from './baseController';

export class SystemConfigurationController extends BaseController {
  /**
   * Updates the system configuration.
   *
   * @param body
   * @return Response from the API call
   */
  async updateSystemConfiguration(
    body?: SystemConfigurationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SystemConfigurationResponse>> {
    const req = this.createRequest('PUT', '/api/system-configuration');
    const mapped = req.prepareArgs({
      body: [body, optional(systemConfigurationRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(systemConfigurationResponseSchema, requestOptions);
  }

  /**
   * Updates, via PATCH, the system configuration.
   *
   * @param body
   * @return Response from the API call
   */
  async patchSystemConfiguration(
    body?: SystemConfigurationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SystemConfigurationResponse>> {
    const req = this.createRequest('PATCH', '/api/system-configuration');
    const mapped = req.prepareArgs({
      body: [body, optional(systemConfigurationRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(systemConfigurationResponseSchema, requestOptions);
  }
}
