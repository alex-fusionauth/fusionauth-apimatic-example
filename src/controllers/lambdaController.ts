/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import { LambdaRequest, lambdaRequestSchema } from '../models/lambdaRequest';
import { LambdaResponse, lambdaResponseSchema } from '../models/lambdaResponse';
import {
  LambdaSearchRequest,
  lambdaSearchRequestSchema,
} from '../models/lambdaSearchRequest';
import {
  LambdaSearchResponse,
  lambdaSearchResponseSchema,
} from '../models/lambdaSearchResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class LambdaController extends BaseController {
  /**
   * Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be
   * generated.
   *
   * @param lambdaId     (Optional) The Id for the lambda. If not provided a secure random
   *                                             UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createLambda(
    lambdaId: string,
    body?: LambdaRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LambdaResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      lambdaId: [lambdaId, string()],
      body: [body, optional(lambdaRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/lambda/${mapped.lambdaId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lambdaResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the lambdas for the provided type.
   *
   * @param type The type of the lambda to return.
   * @return Response from the API call
   */
  async retrieveLambdasByType(
    type?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LambdaResponse>> {
    const req = this.createRequest('GET', '/api/lambda');
    const mapped = req.prepareArgs({ type: [type, optional(string())] });
    req.query('type', mapped.type);
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lambdaResponseSchema, requestOptions);
  }

  /**
   * Searches lambdas with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchLambdas(
    body?: LambdaSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LambdaSearchResponse>> {
    const req = this.createRequest('POST', '/api/lambda/search');
    const mapped = req.prepareArgs({
      body: [body, optional(lambdaSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lambdaSearchResponseSchema, requestOptions);
  }

  /**
   * Deletes the lambda for the given Id.
   *
   * @param lambdaId The Id of the lambda to delete.
   * @return Response from the API call
   */
  async deleteLambda(
    lambdaId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ lambdaId: [lambdaId, string()] });
    req.appendTemplatePath`/api/lambda/${mapped.lambdaId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Updates, via PATCH, the lambda with the given Id.
   *
   * @param lambdaId     The Id of the lambda to update.
   * @param body
   * @return Response from the API call
   */
  async patchLambda(
    lambdaId: string,
    body?: LambdaRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LambdaResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      lambdaId: [lambdaId, string()],
      body: [body, optional(lambdaRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/lambda/${mapped.lambdaId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lambdaResponseSchema, requestOptions);
  }

  /**
   * Retrieves the lambda for the given Id.
   *
   * @param lambdaId The Id of the lambda.
   * @return Response from the API call
   */
  async retrieveLambda(
    lambdaId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LambdaResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ lambdaId: [lambdaId, string()] });
    req.appendTemplatePath`/api/lambda/${mapped.lambdaId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lambdaResponseSchema, requestOptions);
  }

  /**
   * Updates the lambda with the given Id.
   *
   * @param lambdaId     The Id of the lambda to update.
   * @param body
   * @return Response from the API call
   */
  async updateLambda(
    lambdaId: string,
    body?: LambdaRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LambdaResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      lambdaId: [lambdaId, string()],
      body: [body, optional(lambdaRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/lambda/${mapped.lambdaId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lambdaResponseSchema, requestOptions);
  }
}
