/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  MessageTemplateRequest,
  messageTemplateRequestSchema,
} from '../models/messageTemplateRequest';
import {
  MessageTemplateResponse,
  messageTemplateResponseSchema,
} from '../models/messageTemplateResponse';
import {
  PreviewMessageTemplateRequest,
  previewMessageTemplateRequestSchema,
} from '../models/previewMessageTemplateRequest';
import {
  PreviewMessageTemplateResponse,
  previewMessageTemplateResponseSchema,
} from '../models/previewMessageTemplateResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class MessageController extends BaseController {
  /**
   * Retrieves the message template for the given Id. If you don't specify the id, this will return all
   * the message templates.
   *
   * @param messageTemplateId (Optional) The Id of the message template.
   * @return Response from the API call
   */
  async retrieveMessageTemplate(
    messageTemplateId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessageTemplateResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      messageTemplateId: [messageTemplateId, string()],
    });
    req.appendTemplatePath`/api/message/template/${mapped.messageTemplateId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messageTemplateResponseSchema, requestOptions);
  }

  /**
   * Creates a preview of the message template provided in the request, normalized to a given locale.
   *
   * @param body
   * @return Response from the API call
   */
  async retrieveMessageTemplatePreview(
    body?: PreviewMessageTemplateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PreviewMessageTemplateResponse>> {
    const req = this.createRequest('POST', '/api/message/template/preview');
    const mapped = req.prepareArgs({
      body: [body, optional(previewMessageTemplateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(previewMessageTemplateResponseSchema, requestOptions);
  }

  /**
   * Deletes the message template for the given Id.
   *
   * @param messageTemplateId The Id of the message template to delete.
   * @return Response from the API call
   */
  async deleteMessageTemplate(
    messageTemplateId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      messageTemplateId: [messageTemplateId, string()],
    });
    req.appendTemplatePath`/api/message/template/${mapped.messageTemplateId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Retrieves all the message templates.
   *
   * @return Response from the API call
   */
  async retrieveMessageTemplates(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessageTemplateResponse>> {
    const req = this.createRequest('GET', '/api/message/template');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messageTemplateResponseSchema, requestOptions);
  }

  /**
   * Creates an message template. You can optionally specify an Id for the template, if not provided one
   * will be generated.
   *
   * @param messageTemplateId (Optional) The Id for the template. If not provided a
   *                                                           secure random UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createMessageTemplate(
    messageTemplateId: string,
    body?: MessageTemplateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessageTemplateResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      messageTemplateId: [messageTemplateId, string()],
      body: [body, optional(messageTemplateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/message/template/${mapped.messageTemplateId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messageTemplateResponseSchema, requestOptions);
  }

  /**
   * Updates, via PATCH, the message template with the given Id.
   *
   * @param messageTemplateId The Id of the message template to update.
   * @param body
   * @return Response from the API call
   */
  async patchMessageTemplate(
    messageTemplateId: string,
    body?: MessageTemplateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessageTemplateResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      messageTemplateId: [messageTemplateId, string()],
      body: [body, optional(messageTemplateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/message/template/${mapped.messageTemplateId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messageTemplateResponseSchema, requestOptions);
  }

  /**
   * Updates the message template with the given Id.
   *
   * @param messageTemplateId The Id of the message template to update.
   * @param body
   * @return Response from the API call
   */
  async updateMessageTemplate(
    messageTemplateId: string,
    body?: MessageTemplateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessageTemplateResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      messageTemplateId: [messageTemplateId, string()],
      body: [body, optional(messageTemplateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/message/template/${mapped.messageTemplateId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messageTemplateResponseSchema, requestOptions);
  }
}
