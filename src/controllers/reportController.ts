/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  DailyActiveUserReportResponse,
  dailyActiveUserReportResponseSchema,
} from '../models/dailyActiveUserReportResponse';
import {
  LoginReportResponse,
  loginReportResponseSchema,
} from '../models/loginReportResponse';
import {
  MonthlyActiveUserReportResponse,
  monthlyActiveUserReportResponseSchema,
} from '../models/monthlyActiveUserReportResponse';
import {
  RegistrationReportResponse,
  registrationReportResponseSchema,
} from '../models/registrationReportResponse';
import {
  TotalsReportResponse,
  totalsReportResponseSchema,
} from '../models/totalsReportResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ReportController extends BaseController {
  /**
   * Retrieves the login report between the two instants for a particular user by login Id. If you
   * specify an application id, it will only return the login counts for that application. OR Retrieves
   * the login report between the two instants for a particular user by Id. If you specify an application
   * id, it will only return the login counts for that application. OR Retrieves the login report between
   * the two instants. If you specify an application id, it will only return the login counts for that
   * application.
   *
   * @param applicationId (Optional) The application id.
   * @param loginId       The userId id.
   * @param start         The start instant as UTC milliseconds since Epoch.
   * @param end           The end instant as UTC milliseconds since Epoch.
   * @param userId        The userId id.
   * @return Response from the API call
   */
  async retrieveReportLoginretrieveLoginReportretrieveUserLoginReportretrieveUserLoginReportByLoginId(
    applicationId?: string,
    loginId?: string,
    start?: string,
    end?: string,
    userId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LoginReportResponse>> {
    const req = this.createRequest('GET', '/api/report/login');
    const mapped = req.prepareArgs({
      applicationId: [applicationId, optional(string())],
      loginId: [loginId, optional(string())],
      start: [start, optional(string())],
      end: [end, optional(string())],
      userId: [userId, optional(string())],
    });
    req.query('applicationId', mapped.applicationId);
    req.query('loginId', mapped.loginId);
    req.query('start', mapped.start);
    req.query('end', mapped.end);
    req.query('userId', mapped.userId);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(loginReportResponseSchema, requestOptions);
  }

  /**
   * Retrieves the daily active user report between the two instants. If you specify an application id,
   * it will only return the daily active counts for that application.
   *
   * @param applicationId (Optional) The application id.
   * @param start         The start instant as UTC milliseconds since Epoch.
   * @param end           The end instant as UTC milliseconds since Epoch.
   * @return Response from the API call
   */
  async retrieveDailyActiveReport(
    applicationId?: string,
    start?: string,
    end?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DailyActiveUserReportResponse>> {
    const req = this.createRequest('GET', '/api/report/daily-active-user');
    const mapped = req.prepareArgs({
      applicationId: [applicationId, optional(string())],
      start: [start, optional(string())],
      end: [end, optional(string())],
    });
    req.query('applicationId', mapped.applicationId);
    req.query('start', mapped.start);
    req.query('end', mapped.end);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(dailyActiveUserReportResponseSchema, requestOptions);
  }

  /**
   * Retrieves the totals report. This contains all the total counts for each application and the global
   * registration count.
   *
   * @return Response from the API call
   */
  async retrieveTotalReport(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TotalsReportResponse>> {
    const req = this.createRequest('GET', '/api/report/totals');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(totalsReportResponseSchema, requestOptions);
  }

  /**
   * Retrieves the registration report between the two instants. If you specify an application id, it
   * will only return the registration counts for that application.
   *
   * @param applicationId (Optional) The application id.
   * @param start         The start instant as UTC milliseconds since Epoch.
   * @param end           The end instant as UTC milliseconds since Epoch.
   * @return Response from the API call
   */
  async retrieveRegistrationReport(
    applicationId?: string,
    start?: string,
    end?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RegistrationReportResponse>> {
    const req = this.createRequest('GET', '/api/report/registration');
    const mapped = req.prepareArgs({
      applicationId: [applicationId, optional(string())],
      start: [start, optional(string())],
      end: [end, optional(string())],
    });
    req.query('applicationId', mapped.applicationId);
    req.query('start', mapped.start);
    req.query('end', mapped.end);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(registrationReportResponseSchema, requestOptions);
  }

  /**
   * Retrieves the monthly active user report between the two instants. If you specify an application id,
   * it will only return the monthly active counts for that application.
   *
   * @param applicationId (Optional) The application id.
   * @param start         The start instant as UTC milliseconds since Epoch.
   * @param end           The end instant as UTC milliseconds since Epoch.
   * @return Response from the API call
   */
  async retrieveMonthlyActiveReport(
    applicationId?: string,
    start?: string,
    end?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MonthlyActiveUserReportResponse>> {
    const req = this.createRequest('GET', '/api/report/monthly-active-user');
    const mapped = req.prepareArgs({
      applicationId: [applicationId, optional(string())],
      start: [start, optional(string())],
      end: [end, optional(string())],
    });
    req.query('applicationId', mapped.applicationId);
    req.query('start', mapped.start);
    req.query('end', mapped.end);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(
      monthlyActiveUserReportResponseSchema,
      requestOptions
    );
  }
}
