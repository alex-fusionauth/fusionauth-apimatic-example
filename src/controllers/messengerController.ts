/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  MessengerRequest,
  messengerRequestSchema,
} from '../models/messengerRequest';
import {
  MessengerResponse,
  messengerResponseSchema,
} from '../models/messengerResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class MessengerController extends BaseController {
  /**
   * Updates, via PATCH, the messenger with the given Id.
   *
   * @param messengerId  The Id of the messenger to update.
   * @param body
   * @return Response from the API call
   */
  async patchMessenger(
    messengerId: string,
    body?: MessengerRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessengerResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      messengerId: [messengerId, string()],
      body: [body, optional(messengerRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/messenger/${mapped.messengerId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messengerResponseSchema, requestOptions);
  }

  /**
   * Deletes the messenger for the given Id.
   *
   * @param messengerId The Id of the messenger to delete.
   * @return Response from the API call
   */
  async deleteMessenger(
    messengerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ messengerId: [messengerId, string()] });
    req.appendTemplatePath`/api/messenger/${mapped.messengerId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Retrieves the messenger with the given Id.
   *
   * @param messengerId The Id of the messenger.
   * @return Response from the API call
   */
  async retrieveMessenger(
    messengerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessengerResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ messengerId: [messengerId, string()] });
    req.appendTemplatePath`/api/messenger/${mapped.messengerId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messengerResponseSchema, requestOptions);
  }

  /**
   * Updates the messenger with the given Id.
   *
   * @param messengerId  The Id of the messenger to update.
   * @param body
   * @return Response from the API call
   */
  async updateMessenger(
    messengerId: string,
    body?: MessengerRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessengerResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      messengerId: [messengerId, string()],
      body: [body, optional(messengerRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/messenger/${mapped.messengerId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messengerResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the messengers.
   *
   * @return Response from the API call
   */
  async retrieveMessengers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessengerResponse>> {
    const req = this.createRequest('GET', '/api/messenger');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messengerResponseSchema, requestOptions);
  }

  /**
   * Creates a messenger.  You can optionally specify an Id for the messenger, if not provided one will
   * be generated.
   *
   * @param messengerId  (Optional) The Id for the messenger. If not provided a secure
   *                                                random UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createMessenger(
    messengerId: string,
    body?: MessengerRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MessengerResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      messengerId: [messengerId, string()],
      body: [body, optional(messengerRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/messenger/${mapped.messengerId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(messengerResponseSchema, requestOptions);
  }
}
