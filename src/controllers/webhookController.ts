/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import { WebhookRequest, webhookRequestSchema } from '../models/webhookRequest';
import {
  WebhookResponse,
  webhookResponseSchema,
} from '../models/webhookResponse';
import {
  WebhookSearchRequest,
  webhookSearchRequestSchema,
} from '../models/webhookSearchRequest';
import {
  WebhookSearchResponse,
  webhookSearchResponseSchema,
} from '../models/webhookSearchResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class WebhookController extends BaseController {
  /**
   * Deletes the webhook for the given Id.
   *
   * @param webhookId The Id of the webhook to delete.
   * @return Response from the API call
   */
  async deleteWebhook(
    webhookId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ webhookId: [webhookId, string()] });
    req.appendTemplatePath`/api/webhook/${mapped.webhookId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Updates the webhook with the given Id.
   *
   * @param webhookId    The Id of the webhook to update.
   * @param body
   * @return Response from the API call
   */
  async updateWebhook(
    webhookId: string,
    body?: WebhookRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebhookResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      webhookId: [webhookId, string()],
      body: [body, optional(webhookRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/webhook/${mapped.webhookId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webhookResponseSchema, requestOptions);
  }

  /**
   * Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the
   * webhooks.
   *
   * @param webhookId (Optional) The Id of the webhook.
   * @return Response from the API call
   */
  async retrieveWebhook(
    webhookId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebhookResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ webhookId: [webhookId, string()] });
    req.appendTemplatePath`/api/webhook/${mapped.webhookId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webhookResponseSchema, requestOptions);
  }

  /**
   * Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be
   * generated.
   *
   * @param webhookId    (Optional) The Id for the webhook. If not provided a secure random
   *                                              UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createWebhook(
    webhookId: string,
    body?: WebhookRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebhookResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      webhookId: [webhookId, string()],
      body: [body, optional(webhookRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/webhook/${mapped.webhookId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webhookResponseSchema, requestOptions);
  }

  /**
   * Searches webhooks with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchWebhooks(
    body?: WebhookSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebhookSearchResponse>> {
    const req = this.createRequest('POST', '/api/webhook/search');
    const mapped = req.prepareArgs({
      body: [body, optional(webhookSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webhookSearchResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the webhooks.
   *
   * @return Response from the API call
   */
  async retrieveWebhooks(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebhookResponse>> {
    const req = this.createRequest('GET', '/api/webhook');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webhookResponseSchema, requestOptions);
  }
}
