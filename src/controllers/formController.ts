/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  FormFieldRequest,
  formFieldRequestSchema,
} from '../models/formFieldRequest';
import {
  FormFieldResponse,
  formFieldResponseSchema,
} from '../models/formFieldResponse';
import { FormRequest, formRequestSchema } from '../models/formRequest';
import { FormResponse, formResponseSchema } from '../models/formResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class FormController extends BaseController {
  /**
   * Creates a form.  You can optionally specify an Id for the form, if not provided one will be
   * generated.
   *
   * @param formId       (Optional) The Id for the form. If not provided a secure random UUID
   *                                           will be generated.
   * @param body
   * @return Response from the API call
   */
  async createForm(
    formId: string,
    body?: FormRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      formId: [formId, string()],
      body: [body, optional(formRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/form/${mapped.formId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formResponseSchema, requestOptions);
  }

  /**
   * Retrieves the form with the given Id.
   *
   * @param formId The Id of the form.
   * @return Response from the API call
   */
  async retrieveForm(
    formId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ formId: [formId, string()] });
    req.appendTemplatePath`/api/form/${mapped.formId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formResponseSchema, requestOptions);
  }

  /**
   * Deletes the form field for the given Id.
   *
   * @param fieldId The Id of the form field to delete.
   * @return Response from the API call
   */
  async deleteFormField(
    fieldId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ fieldId: [fieldId, string()] });
    req.appendTemplatePath`/api/form/field/${mapped.fieldId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Updates the form field with the given Id.
   *
   * @param fieldId      The Id of the form field to update.
   * @param body
   * @return Response from the API call
   */
  async updateFormField(
    fieldId: string,
    body?: FormFieldRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormFieldResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      fieldId: [fieldId, string()],
      body: [body, optional(formFieldRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/form/field/${mapped.fieldId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formFieldResponseSchema, requestOptions);
  }

  /**
   * Updates the form with the given Id.
   *
   * @param formId       The Id of the form to update.
   * @param body
   * @return Response from the API call
   */
  async updateForm(
    formId: string,
    body?: FormRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      formId: [formId, string()],
      body: [body, optional(formRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/form/${mapped.formId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the forms fields
   *
   * @return Response from the API call
   */
  async retrieveFormFields(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormFieldResponse>> {
    const req = this.createRequest('GET', '/api/form/field');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formFieldResponseSchema, requestOptions);
  }

  /**
   * Retrieves all the forms.
   *
   * @return Response from the API call
   */
  async retrieveForms(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormResponse>> {
    const req = this.createRequest('GET', '/api/form');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formResponseSchema, requestOptions);
  }

  /**
   * Deletes the form for the given Id.
   *
   * @param formId The Id of the form to delete.
   * @return Response from the API call
   */
  async deleteForm(
    formId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ formId: [formId, string()] });
    req.appendTemplatePath`/api/form/${mapped.formId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Creates a form field.  You can optionally specify an Id for the form, if not provided one will be
   * generated.
   *
   * @param fieldId      (Optional) The Id for the form field. If not provided a secure
   *                                                random UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createFormField(
    fieldId: string,
    body?: FormFieldRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormFieldResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      fieldId: [fieldId, string()],
      body: [body, optional(formFieldRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/form/field/${mapped.fieldId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formFieldResponseSchema, requestOptions);
  }

  /**
   * Retrieves the form field with the given Id.
   *
   * @param fieldId The Id of the form field.
   * @return Response from the API call
   */
  async retrieveFormField(
    fieldId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FormFieldResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ fieldId: [fieldId, string()] });
    req.appendTemplatePath`/api/form/field/${mapped.fieldId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(formFieldResponseSchema, requestOptions);
  }
}
