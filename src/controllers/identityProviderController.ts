/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  IdentityProviderLinkRequest,
  identityProviderLinkRequestSchema,
} from '../models/identityProviderLinkRequest';
import {
  IdentityProviderLinkResponse,
  identityProviderLinkResponseSchema,
} from '../models/identityProviderLinkResponse';
import {
  IdentityProviderLoginRequest,
  identityProviderLoginRequestSchema,
} from '../models/identityProviderLoginRequest';
import {
  IdentityProviderPendingLinkResponse,
  identityProviderPendingLinkResponseSchema,
} from '../models/identityProviderPendingLinkResponse';
import {
  IdentityProviderRequest,
  identityProviderRequestSchema,
} from '../models/identityProviderRequest';
import {
  IdentityProviderResponse,
  identityProviderResponseSchema,
} from '../models/identityProviderResponse';
import {
  IdentityProviderSearchRequest,
  identityProviderSearchRequestSchema,
} from '../models/identityProviderSearchRequest';
import {
  IdentityProviderSearchResponse,
  identityProviderSearchResponseSchema,
} from '../models/identityProviderSearchResponse';
import {
  IdentityProviderStartLoginRequest,
  identityProviderStartLoginRequestSchema,
} from '../models/identityProviderStartLoginRequest';
import {
  IdentityProviderStartLoginResponse,
  identityProviderStartLoginResponseSchema,
} from '../models/identityProviderStartLoginResponse';
import { LoginResponse, loginResponseSchema } from '../models/loginResponse';
import { LookupResponse, lookupResponseSchema } from '../models/lookupResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class IdentityProviderController extends BaseController {
  /**
   * Creates an identity provider. You can optionally specify an Id for the identity provider, if not
   * provided one will be generated.
   *
   * @param identityProviderId (Optional) The Id of the identity provider. If not
   *                                                             provided a secure random UUID will be generated.
   * @param body
   * @return Response from the API call
   */
  async createIdentityProvider(
    identityProviderId: string,
    body?: IdentityProviderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, string()],
      body: [body, optional(identityProviderRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/identity-provider/${mapped.identityProviderId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderResponseSchema, requestOptions);
  }

  /**
   * Deletes the identity provider for the given Id.
   *
   * @param identityProviderId The Id of the identity provider to delete.
   * @return Response from the API call
   */
  async deleteIdentityProvider(
    identityProviderId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, string()],
    });
    req.appendTemplatePath`/api/identity-provider/${mapped.identityProviderId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Updates, via PATCH, the identity provider with the given Id.
   *
   * @param identityProviderId The Id of the identity provider to update.
   * @param body
   * @return Response from the API call
   */
  async patchIdentityProvider(
    identityProviderId: string,
    body?: IdentityProviderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, string()],
      body: [body, optional(identityProviderRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/identity-provider/${mapped.identityProviderId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderResponseSchema, requestOptions);
  }

  /**
   * Updates the identity provider with the given Id.
   *
   * @param identityProviderId The Id of the identity provider to update.
   * @param body
   * @return Response from the API call
   */
  async updateIdentityProvider(
    identityProviderId: string,
    body?: IdentityProviderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, string()],
      body: [body, optional(identityProviderRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/identity-provider/${mapped.identityProviderId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderResponseSchema, requestOptions);
  }

  /**
   * Remove an existing link that has been made from a 3rd party identity provider to a FusionAuth user.
   *
   * @param identityProviderId     The unique Id of the identity provider.
   * @param identityProviderUserId The unique Id of the user in the 3rd party identity provider to unlink.
   * @param userId                 The unique Id of the FusionAuth user to unlink.
   * @return Response from the API call
   */
  async deleteUserLink(
    identityProviderId?: string,
    identityProviderUserId?: string,
    userId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderLinkResponse>> {
    const req = this.createRequest('DELETE', '/api/identity-provider/link');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, optional(string())],
      identityProviderUserId: [identityProviderUserId, optional(string())],
      userId: [userId, optional(string())],
    });
    req.query('identityProviderId', mapped.identityProviderId);
    req.query('identityProviderUserId', mapped.identityProviderUserId);
    req.query('userId', mapped.userId);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderLinkResponseSchema, requestOptions);
  }

  /**
   * Retrieves the identity provider for the given domain. A 200 response code indicates the domain is
   * managed by a registered identity provider. A 404 indicates the domain is not managed.
   *
   * @param domain The domain or email address to lookup.
   * @return Response from the API call
   */
  async lookupIdentityProvider(
    domain?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LookupResponse>> {
    const req = this.createRequest('GET', '/api/identity-provider/lookup');
    const mapped = req.prepareArgs({ domain: [domain, optional(string())] });
    req.query('domain', mapped.domain);
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(lookupResponseSchema, requestOptions);
  }

  /**
   * Searches identity providers with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchIdentityProviders(
    body?: IdentityProviderSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderSearchResponse>> {
    const req = this.createRequest('POST', '/api/identity-provider/search');
    const mapped = req.prepareArgs({
      body: [body, optional(identityProviderSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderSearchResponseSchema, requestOptions);
  }

  /**
   * Begins a login request for a 3rd party login that requires user interaction such as HYPR.
   *
   * @param body
   * @return Response from the API call
   */
  async startIdentityProviderLogin(
    body?: IdentityProviderStartLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderStartLoginResponse>> {
    const req = this.createRequest('POST', '/api/identity-provider/start');
    const mapped = req.prepareArgs({
      body: [body, optional(identityProviderStartLoginRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(
      identityProviderStartLoginResponseSchema,
      requestOptions
    );
  }

  /**
   * Retrieves the identity provider for the given Id or all the identity providers if the Id is null.
   *
   * @param identityProviderId The identity provider Id.
   * @return Response from the API call
   */
  async retrieveIdentityProvider(
    identityProviderId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, string()],
    });
    req.appendTemplatePath`/api/identity-provider/${mapped.identityProviderId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderResponseSchema, requestOptions);
  }

  /**
   * Retrieves one or more identity provider for the given type. For types such as Google, Facebook,
   * Twitter and LinkedIn, only a single  identity provider can exist. For types such as OpenID Connect
   * and SAMLv2 more than one identity provider can be configured so this request  may return multiple
   * identity providers.
   *
   * @param type The type of the identity provider.
   * @return Response from the API call
   */
  async retrieveIdentityProviderByType(
    type?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderResponse>> {
    const req = this.createRequest('GET', '/api/identity-provider');
    const mapped = req.prepareArgs({ type: [type, optional(string())] });
    req.query('type', mapped.type);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderResponseSchema, requestOptions);
  }

  /**
   * Link an external user from a 3rd party identity provider to a FusionAuth user.
   *
   * @param body
   * @return Response from the API call
   */
  async createUserLink(
    body?: IdentityProviderLinkRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderLinkResponse>> {
    const req = this.createRequest('POST', '/api/identity-provider/link');
    const mapped = req.prepareArgs({
      body: [body, optional(identityProviderLinkRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderLinkResponseSchema, requestOptions);
  }

  /**
   * Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
   * login systems.
   *
   * @param xFusionAuthTenantId   The unique Id of the tenant used to scope
   *                                                                     this API request. Only required when there is
   *                                                                     more than one tenant and the API key is not
   *                                                                     tenant-scoped.
   * @param body
   * @return Response from the API call
   */
  async identityProviderLogin(
    xFusionAuthTenantId?: string,
    body?: IdentityProviderLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LoginResponse>> {
    const req = this.createRequest('POST', '/api/identity-provider/login');
    const mapped = req.prepareArgs({
      xFusionAuthTenantId: [xFusionAuthTenantId, optional(string())],
      body: [body, optional(identityProviderLoginRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-FusionAuth-TenantId', mapped.xFusionAuthTenantId);
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(loginResponseSchema, requestOptions);
  }

  /**
   * Retrieve a pending identity provider link. This is useful to validate a pending link and retrieve
   * meta-data about the identity provider link.
   *
   * @param pendingLinkId The pending link Id.
   * @param userId        The optional userId. When provided additional meta-data will be provided to
   *                                identify how many links if any the user already has.
   * @return Response from the API call
   */
  async retrievePendingLink(
    pendingLinkId: string,
    userId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderPendingLinkResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      pendingLinkId: [pendingLinkId, string()],
      userId: [userId, optional(string())],
    });
    req.query('userId', mapped.userId);
    req.appendTemplatePath`/api/identity-provider/link/pending/${mapped.pendingLinkId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(
      identityProviderPendingLinkResponseSchema,
      requestOptions
    );
  }

  /**
   * Retrieve all Identity Provider users (links) for the user. Specify the optional identityProviderId
   * to retrieve links for a particular IdP. OR Retrieve a single Identity Provider user (link).
   *
   * @param identityProviderId     (Optional) The unique Id of the identity provider. Specify this value to
   *                                         reduce the links returned to those for a particular IdP.
   * @param userId                 The unique Id of the user.
   * @param identityProviderUserId The unique Id of the user in the 3rd party identity provider.
   * @return Response from the API call
   */
  async retrieveIdentityProviderLinkretrieveUserLinkretrieveUserLinksByUserId(
    identityProviderId?: string,
    userId?: string,
    identityProviderUserId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityProviderLinkResponse>> {
    const req = this.createRequest('GET', '/api/identity-provider/link');
    const mapped = req.prepareArgs({
      identityProviderId: [identityProviderId, optional(string())],
      userId: [userId, optional(string())],
      identityProviderUserId: [identityProviderUserId, optional(string())],
    });
    req.query('identityProviderId', mapped.identityProviderId);
    req.query('userId', mapped.userId);
    req.query('identityProviderUserId', mapped.identityProviderUserId);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(identityProviderLinkResponseSchema, requestOptions);
  }
}
