/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import { OAuthError } from '../errors/oAuthError';
import { AccessToken, accessTokenSchema } from '../models/accessToken';
import {
  DeviceApprovalResponse,
  deviceApprovalResponseSchema,
} from '../models/deviceApprovalResponse';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class Oauth2Controller extends BaseController {
  /**
   * Inspect an access token issued as the result of the Client Credentials Grant. OR Inspect an access
   * token issued as the result of the User based grant such as the Authorization Code Grant, Implicit
   * Grant, the User Credentials Grant or the Refresh Grant.
   *
   * @return Response from the API call
   */
  async createIntrospectintrospectAccessTokenintrospectClientCredentialsAccessToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/oauth2/introspect');
    req.defaultToError(OAuthError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(optional(unknown()), requestOptions);
  }

  /**
   * Approve a device grant.
   *
   * @return Response from the API call
   */
  async approveDevice(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceApprovalResponse>> {
    const req = this.createRequest('POST', '/oauth2/device/approve');
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(deviceApprovalResponseSchema, requestOptions);
  }

  /**
   * Retrieve a user_code that is part of an in-progress Device Authorization Grant.  This API is useful
   * if you want to build your own login workflow to complete a device grant.  This request will require
   * an API key. OR Retrieve a user_code that is part of an in-progress Device Authorization Grant.  This
   * API is useful if you want to build your own login workflow to complete a device grant.
   *
   * @return Response from the API call
   */
  async retrieveDeviceUserCoderetrieveUserCoderetrieveUserCodeUsingAPIKey(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/oauth2/device/user-code');
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Call the UserInfo endpoint to retrieve User Claims from the access token issued by FusionAuth.
   *
   * @return Response from the API call
   */
  async retrieveUserInfoFromAccessToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/oauth2/userinfo');
    req.defaultToError(OAuthError, 'Error');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(optional(unknown()), requestOptions);
  }

  /**
   * Validates the end-user provided user_code from the user-interaction of the Device Authorization
   * Grant. If you build your own activation form you should validate the user provided code prior to
   * beginning the Authorization grant.
   *
   * @param userCode  The end-user verification code.
   * @param clientId  The client id.
   * @return Response from the API call
   */
  async validateDevice(
    userCode?: string,
    clientId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/oauth2/device/validate');
    const mapped = req.prepareArgs({
      userCode: [userCode, optional(string())],
      clientId: [clientId, optional(string())],
    });
    req.query('user_code', mapped.userCode);
    req.query('client_id', mapped.clientId);
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Exchange User Credentials for a Token. If you will be using the Resource Owner Password Credential
   * Grant, you will make a request to the Token endpoint to exchange the user’s email and password for
   * an access token. OR Exchange a Refresh Token for an Access Token. If you will be using the Refresh
   * Token Grant, you will make a request to the Token endpoint to exchange the user’s refresh token for
   * an access token. OR Exchanges an OAuth authorization code and code_verifier for an access token.
   * Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize
   * endpoint and a code_verifier for an access token. OR Exchanges an OAuth authorization code for an
   * access token. Makes a request to the Token endpoint to exchange the authorization code returned from
   * the Authorize endpoint for an access token. OR Make a Client Credentials grant request to obtain an
   * access token.
   *
   * @return Response from the API call
   */
  async createTokenclientCredentialsGrantexchangeOAuthCodeForAccessTokenexchangeOAuthCodeForAccessTokenUsingPKCEexchangeRefreshTokenForAccessTokenexchangeUserCredentialsForAccessToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccessToken>> {
    const req = this.createRequest('POST', '/oauth2/token');
    req.defaultToError(OAuthError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(accessTokenSchema, requestOptions);
  }
}
