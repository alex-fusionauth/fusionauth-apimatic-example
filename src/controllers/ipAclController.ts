/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import {
  IPAccessControlListRequest,
  iPAccessControlListRequestSchema,
} from '../models/iPAccessControlListRequest';
import {
  IPAccessControlListResponse,
  iPAccessControlListResponseSchema,
} from '../models/iPAccessControlListResponse';
import {
  IPAccessControlListSearchRequest,
  iPAccessControlListSearchRequestSchema,
} from '../models/iPAccessControlListSearchRequest';
import {
  IPAccessControlListSearchResponse,
  iPAccessControlListSearchResponseSchema,
} from '../models/iPAccessControlListSearchResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class IpAclController extends BaseController {
  /**
   * Creates an IP Access Control List. You can optionally specify an Id on this create request, if one
   * is not provided one will be generated.
   *
   * @param accessControlListId (Optional) The Id for the IP Access Control List.
   *                                                                 If not provided a secure random UUID will be
   *                                                                 generated.
   * @param body
   * @return Response from the API call
   */
  async createIPAccessControlList(
    accessControlListId: string,
    body?: IPAccessControlListRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPAccessControlListResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      accessControlListId: [accessControlListId, string()],
      body: [body, optional(iPAccessControlListRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/ip-acl/${mapped.accessControlListId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(iPAccessControlListResponseSchema, requestOptions);
  }

  /**
   * Deletes the IP Access Control List for the given Id.
   *
   * @param accessControlListId The Id of the IP Access Control List to delete.
   * @return Response from the API call
   */
  async deleteIPAccessControlList(
    accessControlListId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      accessControlListId: [accessControlListId, string()],
    });
    req.appendTemplatePath`/api/ip-acl/${mapped.accessControlListId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Updates the IP Access Control List with the given Id.
   *
   * @param accessControlListId The Id of the IP Access Control List to update.
   * @param body
   * @return Response from the API call
   */
  async updateIPAccessControlList(
    accessControlListId: string,
    body?: IPAccessControlListRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPAccessControlListResponse>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      accessControlListId: [accessControlListId, string()],
      body: [body, optional(iPAccessControlListRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/ip-acl/${mapped.accessControlListId}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(iPAccessControlListResponseSchema, requestOptions);
  }

  /**
   * Retrieves the IP Access Control List with the given Id.
   *
   * @param accessControlListId The Id of the IP Access Control List.
   * @return Response from the API call
   */
  async retrieveIPAccessControlList(
    accessControlListId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPAccessControlListResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accessControlListId: [accessControlListId, string()],
    });
    req.appendTemplatePath`/api/ip-acl/${mapped.accessControlListId}`;
    req.defaultToError(ApiError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(iPAccessControlListResponseSchema, requestOptions);
  }

  /**
   * Searches the IP Access Control Lists with the specified criteria and pagination.
   *
   * @param body
   * @return Response from the API call
   */
  async searchIPAccessControlLists(
    body?: IPAccessControlListSearchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IPAccessControlListSearchResponse>> {
    const req = this.createRequest('POST', '/api/ip-acl/search');
    const mapped = req.prepareArgs({
      body: [body, optional(iPAccessControlListSearchRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(
      iPAccessControlListSearchResponseSchema,
      requestOptions
    );
  }
}
