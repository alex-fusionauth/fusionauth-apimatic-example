/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorsError } from '../errors/errorsError';
import { LoginResponse, loginResponseSchema } from '../models/loginResponse';
import {
  WebAuthnAssertResponse,
  webAuthnAssertResponseSchema,
} from '../models/webAuthnAssertResponse';
import {
  WebAuthnCredentialImportRequest,
  webAuthnCredentialImportRequestSchema,
} from '../models/webAuthnCredentialImportRequest';
import {
  WebAuthnCredentialResponse,
  webAuthnCredentialResponseSchema,
} from '../models/webAuthnCredentialResponse';
import {
  WebAuthnLoginRequest,
  webAuthnLoginRequestSchema,
} from '../models/webAuthnLoginRequest';
import {
  WebAuthnRegisterCompleteRequest,
  webAuthnRegisterCompleteRequestSchema,
} from '../models/webAuthnRegisterCompleteRequest';
import {
  WebAuthnRegisterCompleteResponse,
  webAuthnRegisterCompleteResponseSchema,
} from '../models/webAuthnRegisterCompleteResponse';
import {
  WebAuthnRegisterStartRequest,
  webAuthnRegisterStartRequestSchema,
} from '../models/webAuthnRegisterStartRequest';
import {
  WebAuthnRegisterStartResponse,
  webAuthnRegisterStartResponseSchema,
} from '../models/webAuthnRegisterStartResponse';
import {
  WebAuthnStartRequest,
  webAuthnStartRequestSchema,
} from '../models/webAuthnStartRequest';
import {
  WebAuthnStartResponse,
  webAuthnStartResponseSchema,
} from '../models/webAuthnStartResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class WebauthnController extends BaseController {
  /**
   * Complete a WebAuthn authentication ceremony by validating the signature against the previously
   * generated challenge and then login the user in
   *
   * @param body
   * @return Response from the API call
   */
  async completeWebAuthnLogin(
    body?: WebAuthnLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LoginResponse>> {
    const req = this.createRequest('POST', '/api/webauthn/login');
    const mapped = req.prepareArgs({
      body: [body, optional(webAuthnLoginRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(loginResponseSchema, requestOptions);
  }

  /**
   * Retrieves the WebAuthn credential for the given Id.
   *
   * @param id The Id of the WebAuthn credential.
   * @return Response from the API call
   */
  async retrieveWebAuthnCredential(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebAuthnCredentialResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/webauthn/${mapped.id}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webAuthnCredentialResponseSchema, requestOptions);
  }

  /**
   * Import a WebAuthn credential
   *
   * @param body
   * @return Response from the API call
   */
  async importWebAuthnCredential(
    body?: WebAuthnCredentialImportRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/api/webauthn/import');
    const mapped = req.prepareArgs({
      body: [body, optional(webAuthnCredentialImportRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Retrieves all WebAuthn credentials for the given user.
   *
   * @param userId The user's ID.
   * @return Response from the API call
   */
  async retrieveWebAuthnCredentialsForUser(
    userId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebAuthnCredentialResponse>> {
    const req = this.createRequest('GET', '/api/webauthn');
    const mapped = req.prepareArgs({ userId: [userId, optional(string())] });
    req.query('userId', mapped.userId);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webAuthnCredentialResponseSchema, requestOptions);
  }

  /**
   * Start a WebAuthn authentication ceremony by generating a new challenge for the user
   *
   * @param body
   * @return Response from the API call
   */
  async startWebAuthnLogin(
    body?: WebAuthnStartRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebAuthnStartResponse>> {
    const req = this.createRequest('POST', '/api/webauthn/start');
    const mapped = req.prepareArgs({
      body: [body, optional(webAuthnStartRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webAuthnStartResponseSchema, requestOptions);
  }

  /**
   * Deletes the WebAuthn credential for the given Id.
   *
   * @param id The Id of the WebAuthn credential to delete.
   * @return Response from the API call
   */
  async deleteWebAuthnCredential(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/api/webauthn/${mapped.id}`;
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }

  /**
   * Start a WebAuthn registration ceremony by generating a new challenge for the user
   *
   * @param body
   * @return Response from the API call
   */
  async startWebAuthnRegistration(
    body?: WebAuthnRegisterStartRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebAuthnRegisterStartResponse>> {
    const req = this.createRequest('POST', '/api/webauthn/register/start');
    const mapped = req.prepareArgs({
      body: [body, optional(webAuthnRegisterStartRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webAuthnRegisterStartResponseSchema, requestOptions);
  }

  /**
   * Complete a WebAuthn authentication ceremony by validating the signature against the previously
   * generated challenge without logging the user in
   *
   * @param body
   * @return Response from the API call
   */
  async completeWebAuthnAssertion(
    body?: WebAuthnLoginRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebAuthnAssertResponse>> {
    const req = this.createRequest('POST', '/api/webauthn/assert');
    const mapped = req.prepareArgs({
      body: [body, optional(webAuthnLoginRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(webAuthnAssertResponseSchema, requestOptions);
  }

  /**
   * Complete a WebAuthn registration ceremony by validating the client request and saving the new
   * credential
   *
   * @param body
   * @return Response from the API call
   */
  async completeWebAuthnRegistration(
    body?: WebAuthnRegisterCompleteRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WebAuthnRegisterCompleteResponse>> {
    const req = this.createRequest('POST', '/api/webauthn/register/complete');
    const mapped = req.prepareArgs({
      body: [body, optional(webAuthnRegisterCompleteRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(ErrorsError, 'Error');
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(
      webAuthnRegisterCompleteResponseSchema,
      requestOptions
    );
  }
}
