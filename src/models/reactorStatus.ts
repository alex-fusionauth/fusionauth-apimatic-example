/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, dict, object, optional, Schema, string } from '../schema';
import {
  ReactorFeatureStatusEnum,
  reactorFeatureStatusEnumSchema,
} from './reactorFeatureStatusEnum';

export interface ReactorStatus {
  advancedIdentityProviders?: ReactorFeatureStatusEnum;
  advancedLambdas?: ReactorFeatureStatusEnum;
  advancedMultiFactorAuthentication?: ReactorFeatureStatusEnum;
  advancedOAuthScopes?: ReactorFeatureStatusEnum;
  advancedOAuthScopesCustomScopes?: ReactorFeatureStatusEnum;
  advancedOAuthScopesThirdPartyApplications?: ReactorFeatureStatusEnum;
  advancedRegistration?: ReactorFeatureStatusEnum;
  applicationMultiFactorAuthentication?: ReactorFeatureStatusEnum;
  applicationThemes?: ReactorFeatureStatusEnum;
  breachedPasswordDetection?: ReactorFeatureStatusEnum;
  connectors?: ReactorFeatureStatusEnum;
  entityManagement?: ReactorFeatureStatusEnum;
  /** A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03. */
  expiration?: string;
  licenseAttributes?: Record<string, string>;
  licensed?: boolean;
  scimServer?: ReactorFeatureStatusEnum;
  threatDetection?: ReactorFeatureStatusEnum;
  webAuthn?: ReactorFeatureStatusEnum;
  webAuthnPlatformAuthenticators?: ReactorFeatureStatusEnum;
  webAuthnRoamingAuthenticators?: ReactorFeatureStatusEnum;
}

export const reactorStatusSchema: Schema<ReactorStatus> = object({
  advancedIdentityProviders: [
    'advancedIdentityProviders',
    optional(reactorFeatureStatusEnumSchema),
  ],
  advancedLambdas: [
    'advancedLambdas',
    optional(reactorFeatureStatusEnumSchema),
  ],
  advancedMultiFactorAuthentication: [
    'advancedMultiFactorAuthentication',
    optional(reactorFeatureStatusEnumSchema),
  ],
  advancedOAuthScopes: [
    'advancedOAuthScopes',
    optional(reactorFeatureStatusEnumSchema),
  ],
  advancedOAuthScopesCustomScopes: [
    'advancedOAuthScopesCustomScopes',
    optional(reactorFeatureStatusEnumSchema),
  ],
  advancedOAuthScopesThirdPartyApplications: [
    'advancedOAuthScopesThirdPartyApplications',
    optional(reactorFeatureStatusEnumSchema),
  ],
  advancedRegistration: [
    'advancedRegistration',
    optional(reactorFeatureStatusEnumSchema),
  ],
  applicationMultiFactorAuthentication: [
    'applicationMultiFactorAuthentication',
    optional(reactorFeatureStatusEnumSchema),
  ],
  applicationThemes: [
    'applicationThemes',
    optional(reactorFeatureStatusEnumSchema),
  ],
  breachedPasswordDetection: [
    'breachedPasswordDetection',
    optional(reactorFeatureStatusEnumSchema),
  ],
  connectors: ['connectors', optional(reactorFeatureStatusEnumSchema)],
  entityManagement: [
    'entityManagement',
    optional(reactorFeatureStatusEnumSchema),
  ],
  expiration: ['expiration', optional(string())],
  licenseAttributes: ['licenseAttributes', optional(dict(string()))],
  licensed: ['licensed', optional(boolean())],
  scimServer: ['scimServer', optional(reactorFeatureStatusEnumSchema)],
  threatDetection: [
    'threatDetection',
    optional(reactorFeatureStatusEnumSchema),
  ],
  webAuthn: ['webAuthn', optional(reactorFeatureStatusEnumSchema)],
  webAuthnPlatformAuthenticators: [
    'webAuthnPlatformAuthenticators',
    optional(reactorFeatureStatusEnumSchema),
  ],
  webAuthnRoamingAuthenticators: [
    'webAuthnRoamingAuthenticators',
    optional(reactorFeatureStatusEnumSchema),
  ],
});
