/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  dict,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  AttestationTypeEnum,
  attestationTypeEnumSchema,
} from './attestationTypeEnum';
import {
  CoseAlgorithmIdentifierEnum,
  coseAlgorithmIdentifierEnumSchema,
} from './coseAlgorithmIdentifierEnum';

/** A User's WebAuthnCredential. Contains all data required to complete WebAuthn authentication ceremonies. */
export interface WebAuthnCredential {
  /** A number identifying a cryptographic algorithm. Values should be registered with the <a  href="https:www.iana.orgassignmentscosecose.xhtml#algorithms">IANA COSE Algorithms registry<a> */
  algorithm?: CoseAlgorithmIdentifierEnum;
  /** Used to indicate what type of attestation was included in the authenticator response for a given WebAuthn credential at the time it was created */
  attestationType?: AttestationTypeEnum;
  authenticatorSupportsUserVerification?: boolean;
  credentialId?: string;
  data?: Record<string, unknown>;
  discoverable?: boolean;
  displayName?: string;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUseInstant?: bigint;
  name?: string;
  publicKey?: string;
  relyingPartyId?: string;
  signCount?: number;
  tenantId?: string;
  transports?: string[];
  userAgent?: string;
  userId?: string;
}

export const webAuthnCredentialSchema: Schema<WebAuthnCredential> = object({
  algorithm: ['algorithm', optional(coseAlgorithmIdentifierEnumSchema)],
  attestationType: ['attestationType', optional(attestationTypeEnumSchema)],
  authenticatorSupportsUserVerification: [
    'authenticatorSupportsUserVerification',
    optional(boolean()),
  ],
  credentialId: ['credentialId', optional(string())],
  data: ['data', optional(dict(unknown()))],
  discoverable: ['discoverable', optional(boolean())],
  displayName: ['displayName', optional(string())],
  id: ['id', optional(string())],
  insertInstant: ['insertInstant', optional(bigint())],
  lastUseInstant: ['lastUseInstant', optional(bigint())],
  name: ['name', optional(string())],
  publicKey: ['publicKey', optional(string())],
  relyingPartyId: ['relyingPartyId', optional(string())],
  signCount: ['signCount', optional(number())],
  tenantId: ['tenantId', optional(string())],
  transports: ['transports', optional(array(string()))],
  userAgent: ['userAgent', optional(string())],
  userId: ['userId', optional(string())],
});
