/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  dict,
  lazy,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  ApplicationAccessControlConfiguration,
  applicationAccessControlConfigurationSchema,
} from './applicationAccessControlConfiguration';
import {
  ApplicationEmailConfiguration,
  applicationEmailConfigurationSchema,
} from './applicationEmailConfiguration';
import {
  ApplicationExternalIdentifierConfiguration,
  applicationExternalIdentifierConfigurationSchema,
} from './applicationExternalIdentifierConfiguration';
import {
  ApplicationFormConfiguration,
  applicationFormConfigurationSchema,
} from './applicationFormConfiguration';
import {
  ApplicationMultiFactorConfiguration,
  applicationMultiFactorConfigurationSchema,
} from './applicationMultiFactorConfiguration';
import {
  ApplicationOAuthScope,
  applicationOAuthScopeSchema,
} from './applicationOAuthScope';
import {
  ApplicationRegistrationDeletePolicy,
  applicationRegistrationDeletePolicySchema,
} from './applicationRegistrationDeletePolicy';
import { ApplicationRole, applicationRoleSchema } from './applicationRole';
import {
  ApplicationWebAuthnConfiguration,
  applicationWebAuthnConfigurationSchema,
} from './applicationWebAuthnConfiguration';
import {
  AuthenticationTokenConfiguration,
  authenticationTokenConfigurationSchema,
} from './authenticationTokenConfiguration';
import {
  CleanSpeakConfiguration,
  cleanSpeakConfigurationSchema,
} from './cleanSpeakConfiguration';
import { JWTConfiguration, jWTConfigurationSchema } from './jWTConfiguration';
import {
  LambdaConfiguration,
  lambdaConfigurationSchema,
} from './lambdaConfiguration';
import {
  LoginConfiguration,
  loginConfigurationSchema,
} from './loginConfiguration';
import {
  OAuth2Configuration,
  oAuth2ConfigurationSchema,
} from './oAuth2Configuration';
import { ObjectStateEnum, objectStateEnumSchema } from './objectStateEnum';
import {
  PasswordlessConfiguration,
  passwordlessConfigurationSchema,
} from './passwordlessConfiguration';
import {
  RegistrationConfiguration,
  registrationConfigurationSchema,
} from './registrationConfiguration';
import {
  RegistrationUnverifiedOptions,
  registrationUnverifiedOptionsSchema,
} from './registrationUnverifiedOptions';
import {
  SAMLv2Configuration,
  sAMLv2ConfigurationSchema,
} from './sAMLv2Configuration';
import {
  VerificationStrategyEnum,
  verificationStrategyEnumSchema,
} from './verificationStrategyEnum';

export interface Application {
  accessControlConfiguration?: ApplicationAccessControlConfiguration;
  active?: boolean;
  authenticationTokenConfiguration?: AuthenticationTokenConfiguration;
  /** CleanSpeak configuration at the system and application level. */
  cleanSpeakConfiguration?: CleanSpeakConfiguration;
  data?: Record<string, unknown>;
  emailConfiguration?: ApplicationEmailConfiguration;
  externalIdentifierConfiguration?: ApplicationExternalIdentifierConfiguration;
  formConfiguration?: ApplicationFormConfiguration;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  /** JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration  may be <code>enabled = false<code>. */
  jwtConfiguration?: JWTConfiguration;
  lambdaConfiguration?: LambdaConfiguration;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUpdateInstant?: bigint;
  loginConfiguration?: LoginConfiguration;
  multiFactorConfiguration?: ApplicationMultiFactorConfiguration;
  name?: string;
  oauthConfiguration?: OAuth2Configuration;
  passwordlessConfiguration?: PasswordlessConfiguration;
  registrationConfiguration?: RegistrationConfiguration;
  /** A Application-level policy for deleting Users. */
  registrationDeletePolicy?: ApplicationRegistrationDeletePolicy;
  roles?: ApplicationRole[];
  samlv2Configuration?: SAMLv2Configuration;
  scopes?: ApplicationOAuthScope[];
  state?: ObjectStateEnum;
  tenantId?: string;
  themeId?: string;
  unverified?: RegistrationUnverifiedOptions;
  verificationEmailTemplateId?: string;
  verificationStrategy?: VerificationStrategyEnum;
  verifyRegistration?: boolean;
  /** Application-level configuration for WebAuthn */
  webAuthnConfiguration?: ApplicationWebAuthnConfiguration;
}

export const applicationSchema: Schema<Application> = object({
  accessControlConfiguration: [
    'accessControlConfiguration',
    optional(lazy(() => applicationAccessControlConfigurationSchema)),
  ],
  active: ['active', optional(boolean())],
  authenticationTokenConfiguration: [
    'authenticationTokenConfiguration',
    optional(lazy(() => authenticationTokenConfigurationSchema)),
  ],
  cleanSpeakConfiguration: [
    'cleanSpeakConfiguration',
    optional(lazy(() => cleanSpeakConfigurationSchema)),
  ],
  data: ['data', optional(dict(unknown()))],
  emailConfiguration: [
    'emailConfiguration',
    optional(lazy(() => applicationEmailConfigurationSchema)),
  ],
  externalIdentifierConfiguration: [
    'externalIdentifierConfiguration',
    optional(lazy(() => applicationExternalIdentifierConfigurationSchema)),
  ],
  formConfiguration: [
    'formConfiguration',
    optional(lazy(() => applicationFormConfigurationSchema)),
  ],
  id: ['id', optional(string())],
  insertInstant: ['insertInstant', optional(bigint())],
  jwtConfiguration: [
    'jwtConfiguration',
    optional(lazy(() => jWTConfigurationSchema)),
  ],
  lambdaConfiguration: [
    'lambdaConfiguration',
    optional(lazy(() => lambdaConfigurationSchema)),
  ],
  lastUpdateInstant: ['lastUpdateInstant', optional(bigint())],
  loginConfiguration: [
    'loginConfiguration',
    optional(lazy(() => loginConfigurationSchema)),
  ],
  multiFactorConfiguration: [
    'multiFactorConfiguration',
    optional(lazy(() => applicationMultiFactorConfigurationSchema)),
  ],
  name: ['name', optional(string())],
  oauthConfiguration: [
    'oauthConfiguration',
    optional(lazy(() => oAuth2ConfigurationSchema)),
  ],
  passwordlessConfiguration: [
    'passwordlessConfiguration',
    optional(lazy(() => passwordlessConfigurationSchema)),
  ],
  registrationConfiguration: [
    'registrationConfiguration',
    optional(lazy(() => registrationConfigurationSchema)),
  ],
  registrationDeletePolicy: [
    'registrationDeletePolicy',
    optional(lazy(() => applicationRegistrationDeletePolicySchema)),
  ],
  roles: ['roles', optional(array(lazy(() => applicationRoleSchema)))],
  samlv2Configuration: [
    'samlv2Configuration',
    optional(lazy(() => sAMLv2ConfigurationSchema)),
  ],
  scopes: ['scopes', optional(array(lazy(() => applicationOAuthScopeSchema)))],
  state: ['state', optional(objectStateEnumSchema)],
  tenantId: ['tenantId', optional(string())],
  themeId: ['themeId', optional(string())],
  unverified: [
    'unverified',
    optional(lazy(() => registrationUnverifiedOptionsSchema)),
  ],
  verificationEmailTemplateId: [
    'verificationEmailTemplateId',
    optional(string()),
  ],
  verificationStrategy: [
    'verificationStrategy',
    optional(verificationStrategyEnumSchema),
  ],
  verifyRegistration: ['verifyRegistration', optional(boolean())],
  webAuthnConfiguration: [
    'webAuthnConfiguration',
    optional(lazy(() => applicationWebAuthnConfigurationSchema)),
  ],
});
