/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { ConnectorPolicy, connectorPolicySchema } from './connectorPolicy';
import {
  EmailConfiguration,
  emailConfigurationSchema,
} from './emailConfiguration';
import {
  EventConfiguration,
  eventConfigurationSchema,
} from './eventConfiguration';
import {
  ExternalIdentifierConfiguration,
  externalIdentifierConfigurationSchema,
} from './externalIdentifierConfiguration';
import {
  FailedAuthenticationConfiguration,
  failedAuthenticationConfigurationSchema,
} from './failedAuthenticationConfiguration';
import {
  FamilyConfiguration,
  familyConfigurationSchema,
} from './familyConfiguration';
import { JWTConfiguration, jWTConfigurationSchema } from './jWTConfiguration';
import {
  MaximumPasswordAge,
  maximumPasswordAgeSchema,
} from './maximumPasswordAge';
import {
  MinimumPasswordAge,
  minimumPasswordAgeSchema,
} from './minimumPasswordAge';
import { ObjectStateEnum, objectStateEnumSchema } from './objectStateEnum';
import {
  PasswordEncryptionConfiguration,
  passwordEncryptionConfigurationSchema,
} from './passwordEncryptionConfiguration';
import {
  PasswordValidationRules,
  passwordValidationRulesSchema,
} from './passwordValidationRules';
import {
  TenantAccessControlConfiguration,
  tenantAccessControlConfigurationSchema,
} from './tenantAccessControlConfiguration';
import {
  TenantCaptchaConfiguration,
  tenantCaptchaConfigurationSchema,
} from './tenantCaptchaConfiguration';
import {
  TenantFormConfiguration,
  tenantFormConfigurationSchema,
} from './tenantFormConfiguration';
import {
  TenantLambdaConfiguration,
  tenantLambdaConfigurationSchema,
} from './tenantLambdaConfiguration';
import {
  TenantLoginConfiguration,
  tenantLoginConfigurationSchema,
} from './tenantLoginConfiguration';
import {
  TenantMultiFactorConfiguration,
  tenantMultiFactorConfigurationSchema,
} from './tenantMultiFactorConfiguration';
import {
  TenantOAuth2Configuration,
  tenantOAuth2ConfigurationSchema,
} from './tenantOAuth2Configuration';
import {
  TenantRateLimitConfiguration,
  tenantRateLimitConfigurationSchema,
} from './tenantRateLimitConfiguration';
import {
  TenantRegistrationConfiguration,
  tenantRegistrationConfigurationSchema,
} from './tenantRegistrationConfiguration';
import {
  TenantSCIMServerConfiguration,
  tenantSCIMServerConfigurationSchema,
} from './tenantSCIMServerConfiguration';
import {
  TenantSSOConfiguration,
  tenantSSOConfigurationSchema,
} from './tenantSSOConfiguration';
import {
  TenantUserDeletePolicy,
  tenantUserDeletePolicySchema,
} from './tenantUserDeletePolicy';
import {
  TenantUsernameConfiguration,
  tenantUsernameConfigurationSchema,
} from './tenantUsernameConfiguration';
import {
  TenantWebAuthnConfiguration,
  tenantWebAuthnConfigurationSchema,
} from './tenantWebAuthnConfiguration';

export interface Tenant {
  data?: Record<string, unknown>;
  accessControlConfiguration?: TenantAccessControlConfiguration;
  captchaConfiguration?: TenantCaptchaConfiguration;
  configured?: boolean;
  connectorPolicies?: ConnectorPolicy[];
  emailConfiguration?: EmailConfiguration;
  eventConfiguration?: EventConfiguration;
  externalIdentifierConfiguration?: ExternalIdentifierConfiguration;
  /** Configuration for the behavior of failed login attempts. This helps us protect against brute force password attacks. */
  failedAuthenticationConfiguration?: FailedAuthenticationConfiguration;
  familyConfiguration?: FamilyConfiguration;
  formConfiguration?: TenantFormConfiguration;
  httpSessionMaxInactiveInterval?: number;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  issuer?: string;
  /** JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration  may be <code>enabled = false<code>. */
  jwtConfiguration?: JWTConfiguration;
  lambdaConfiguration?: TenantLambdaConfiguration;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUpdateInstant?: bigint;
  loginConfiguration?: TenantLoginConfiguration;
  logoutURL?: string;
  maximumPasswordAge?: MaximumPasswordAge;
  minimumPasswordAge?: MinimumPasswordAge;
  multiFactorConfiguration?: TenantMultiFactorConfiguration;
  name?: string;
  oauthConfiguration?: TenantOAuth2Configuration;
  /** Password Encryption Scheme Configuration */
  passwordEncryptionConfiguration?: PasswordEncryptionConfiguration;
  passwordValidationRules?: PasswordValidationRules;
  rateLimitConfiguration?: TenantRateLimitConfiguration;
  registrationConfiguration?: TenantRegistrationConfiguration;
  scimServerConfiguration?: TenantSCIMServerConfiguration;
  ssoConfiguration?: TenantSSOConfiguration;
  state?: ObjectStateEnum;
  themeId?: string;
  /** A Tenant-level policy for deleting Users. */
  userDeletePolicy?: TenantUserDeletePolicy;
  usernameConfiguration?: TenantUsernameConfiguration;
  /** Tenant-level configuration for WebAuthn */
  webAuthnConfiguration?: TenantWebAuthnConfiguration;
}

export const tenantSchema: Schema<Tenant> = object({
  data: ['data', optional(dict(unknown()))],
  accessControlConfiguration: [
    'accessControlConfiguration',
    optional(lazy(() => tenantAccessControlConfigurationSchema)),
  ],
  captchaConfiguration: [
    'captchaConfiguration',
    optional(lazy(() => tenantCaptchaConfigurationSchema)),
  ],
  configured: ['configured', optional(boolean())],
  connectorPolicies: [
    'connectorPolicies',
    optional(array(lazy(() => connectorPolicySchema))),
  ],
  emailConfiguration: [
    'emailConfiguration',
    optional(lazy(() => emailConfigurationSchema)),
  ],
  eventConfiguration: [
    'eventConfiguration',
    optional(lazy(() => eventConfigurationSchema)),
  ],
  externalIdentifierConfiguration: [
    'externalIdentifierConfiguration',
    optional(lazy(() => externalIdentifierConfigurationSchema)),
  ],
  failedAuthenticationConfiguration: [
    'failedAuthenticationConfiguration',
    optional(lazy(() => failedAuthenticationConfigurationSchema)),
  ],
  familyConfiguration: [
    'familyConfiguration',
    optional(lazy(() => familyConfigurationSchema)),
  ],
  formConfiguration: [
    'formConfiguration',
    optional(lazy(() => tenantFormConfigurationSchema)),
  ],
  httpSessionMaxInactiveInterval: [
    'httpSessionMaxInactiveInterval',
    optional(number()),
  ],
  id: ['id', optional(string())],
  insertInstant: ['insertInstant', optional(bigint())],
  issuer: ['issuer', optional(string())],
  jwtConfiguration: [
    'jwtConfiguration',
    optional(lazy(() => jWTConfigurationSchema)),
  ],
  lambdaConfiguration: [
    'lambdaConfiguration',
    optional(lazy(() => tenantLambdaConfigurationSchema)),
  ],
  lastUpdateInstant: ['lastUpdateInstant', optional(bigint())],
  loginConfiguration: [
    'loginConfiguration',
    optional(lazy(() => tenantLoginConfigurationSchema)),
  ],
  logoutURL: ['logoutURL', optional(string())],
  maximumPasswordAge: [
    'maximumPasswordAge',
    optional(lazy(() => maximumPasswordAgeSchema)),
  ],
  minimumPasswordAge: [
    'minimumPasswordAge',
    optional(lazy(() => minimumPasswordAgeSchema)),
  ],
  multiFactorConfiguration: [
    'multiFactorConfiguration',
    optional(lazy(() => tenantMultiFactorConfigurationSchema)),
  ],
  name: ['name', optional(string())],
  oauthConfiguration: [
    'oauthConfiguration',
    optional(lazy(() => tenantOAuth2ConfigurationSchema)),
  ],
  passwordEncryptionConfiguration: [
    'passwordEncryptionConfiguration',
    optional(lazy(() => passwordEncryptionConfigurationSchema)),
  ],
  passwordValidationRules: [
    'passwordValidationRules',
    optional(lazy(() => passwordValidationRulesSchema)),
  ],
  rateLimitConfiguration: [
    'rateLimitConfiguration',
    optional(lazy(() => tenantRateLimitConfigurationSchema)),
  ],
  registrationConfiguration: [
    'registrationConfiguration',
    optional(lazy(() => tenantRegistrationConfigurationSchema)),
  ],
  scimServerConfiguration: [
    'scimServerConfiguration',
    optional(lazy(() => tenantSCIMServerConfigurationSchema)),
  ],
  ssoConfiguration: [
    'ssoConfiguration',
    optional(lazy(() => tenantSSOConfigurationSchema)),
  ],
  state: ['state', optional(objectStateEnumSchema)],
  themeId: ['themeId', optional(string())],
  userDeletePolicy: [
    'userDeletePolicy',
    optional(lazy(() => tenantUserDeletePolicySchema)),
  ],
  usernameConfiguration: [
    'usernameConfiguration',
    optional(lazy(() => tenantUsernameConfigurationSchema)),
  ],
  webAuthnConfiguration: [
    'webAuthnConfiguration',
    optional(lazy(() => tenantWebAuthnConfigurationSchema)),
  ],
});
