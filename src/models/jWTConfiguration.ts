/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  RefreshTokenExpirationPolicyEnum,
  refreshTokenExpirationPolicyEnumSchema,
} from './refreshTokenExpirationPolicyEnum';
import {
  RefreshTokenRevocationPolicy,
  refreshTokenRevocationPolicySchema,
} from './refreshTokenRevocationPolicy';
import {
  RefreshTokenSlidingWindowConfiguration,
  refreshTokenSlidingWindowConfigurationSchema,
} from './refreshTokenSlidingWindowConfiguration';
import {
  RefreshTokenUsagePolicyEnum,
  refreshTokenUsagePolicyEnumSchema,
} from './refreshTokenUsagePolicyEnum';

/** JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration  may be <code>enabled = false<code>. */
export interface JWTConfiguration {
  accessTokenKeyId?: string;
  idTokenKeyId?: string;
  refreshTokenExpirationPolicy?: RefreshTokenExpirationPolicyEnum;
  refreshTokenRevocationPolicy?: RefreshTokenRevocationPolicy;
  refreshTokenSlidingWindowConfiguration?: RefreshTokenSlidingWindowConfiguration;
  refreshTokenTimeToLiveInMinutes?: number;
  refreshTokenUsagePolicy?: RefreshTokenUsagePolicyEnum;
  timeToLiveInSeconds?: number;
  enabled?: boolean;
}

export const jWTConfigurationSchema: Schema<JWTConfiguration> = object({
  accessTokenKeyId: ['accessTokenKeyId', optional(string())],
  idTokenKeyId: ['idTokenKeyId', optional(string())],
  refreshTokenExpirationPolicy: [
    'refreshTokenExpirationPolicy',
    optional(refreshTokenExpirationPolicyEnumSchema),
  ],
  refreshTokenRevocationPolicy: [
    'refreshTokenRevocationPolicy',
    optional(lazy(() => refreshTokenRevocationPolicySchema)),
  ],
  refreshTokenSlidingWindowConfiguration: [
    'refreshTokenSlidingWindowConfiguration',
    optional(lazy(() => refreshTokenSlidingWindowConfigurationSchema)),
  ],
  refreshTokenTimeToLiveInMinutes: [
    'refreshTokenTimeToLiveInMinutes',
    optional(number()),
  ],
  refreshTokenUsagePolicy: [
    'refreshTokenUsagePolicy',
    optional(refreshTokenUsagePolicyEnumSchema),
  ],
  timeToLiveInSeconds: ['timeToLiveInSeconds', optional(number())],
  enabled: ['enabled', optional(boolean())],
});
