/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  BreachedPasswordStatusEnum,
  breachedPasswordStatusEnumSchema,
} from './breachedPasswordStatusEnum';
import {
  ChangePasswordReasonEnum,
  changePasswordReasonEnumSchema,
} from './changePasswordReasonEnum';
import { ContentStatusEnum, contentStatusEnumSchema } from './contentStatusEnum';
import { GroupMember, groupMemberSchema } from './groupMember';
import { UserRegistration, userRegistrationSchema } from './userRegistration';
import {
  UserTwoFactorConfiguration,
  userTwoFactorConfigurationSchema,
} from './userTwoFactorConfiguration';

/** The global view of a User. This object contains all global information about the user including birthdate, registration information  preferred languages, global attributes, etc. */
export interface User {
  preferredLanguages?: string[];
  active?: boolean;
  /** A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03. */
  birthDate?: string;
  cleanSpeakId?: string;
  data?: Record<string, unknown>;
  email?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  expiry?: bigint;
  firstName?: string;
  fullName?: string;
  imageUrl?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  lastName?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUpdateInstant?: bigint;
  middleName?: string;
  mobilePhone?: string;
  parentEmail?: string;
  tenantId?: string;
  /** Timezone Identifier */
  timezone?: string;
  twoFactor?: UserTwoFactorConfiguration;
  memberships?: GroupMember[];
  registrations?: UserRegistration[];
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  breachedPasswordLastCheckedInstant?: bigint;
  breachedPasswordStatus?: BreachedPasswordStatusEnum;
  connectorId?: string;
  encryptionScheme?: string;
  factor?: number;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastLoginInstant?: bigint;
  password?: string;
  passwordChangeReason?: ChangePasswordReasonEnum;
  passwordChangeRequired?: boolean;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  passwordLastUpdateInstant?: bigint;
  salt?: string;
  uniqueUsername?: string;
  username?: string;
  /** Status for content like usernames, profile attributes, etc. */
  usernameStatus?: ContentStatusEnum;
  verified?: boolean;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  verifiedInstant?: bigint;
}

export const userSchema: Schema<User> = object({
  preferredLanguages: ['preferredLanguages', optional(array(string()))],
  active: ['active', optional(boolean())],
  birthDate: ['birthDate', optional(string())],
  cleanSpeakId: ['cleanSpeakId', optional(string())],
  data: ['data', optional(dict(unknown()))],
  email: ['email', optional(string())],
  expiry: ['expiry', optional(bigint())],
  firstName: ['firstName', optional(string())],
  fullName: ['fullName', optional(string())],
  imageUrl: ['imageUrl', optional(string())],
  insertInstant: ['insertInstant', optional(bigint())],
  lastName: ['lastName', optional(string())],
  lastUpdateInstant: ['lastUpdateInstant', optional(bigint())],
  middleName: ['middleName', optional(string())],
  mobilePhone: ['mobilePhone', optional(string())],
  parentEmail: ['parentEmail', optional(string())],
  tenantId: ['tenantId', optional(string())],
  timezone: ['timezone', optional(string())],
  twoFactor: [
    'twoFactor',
    optional(lazy(() => userTwoFactorConfigurationSchema)),
  ],
  memberships: ['memberships', optional(array(lazy(() => groupMemberSchema)))],
  registrations: [
    'registrations',
    optional(array(lazy(() => userRegistrationSchema))),
  ],
  breachedPasswordLastCheckedInstant: [
    'breachedPasswordLastCheckedInstant',
    optional(bigint()),
  ],
  breachedPasswordStatus: [
    'breachedPasswordStatus',
    optional(breachedPasswordStatusEnumSchema),
  ],
  connectorId: ['connectorId', optional(string())],
  encryptionScheme: ['encryptionScheme', optional(string())],
  factor: ['factor', optional(number())],
  id: ['id', optional(string())],
  lastLoginInstant: ['lastLoginInstant', optional(bigint())],
  password: ['password', optional(string())],
  passwordChangeReason: [
    'passwordChangeReason',
    optional(changePasswordReasonEnumSchema),
  ],
  passwordChangeRequired: ['passwordChangeRequired', optional(boolean())],
  passwordLastUpdateInstant: ['passwordLastUpdateInstant', optional(bigint())],
  salt: ['salt', optional(string())],
  uniqueUsername: ['uniqueUsername', optional(string())],
  username: ['username', optional(string())],
  usernameStatus: ['usernameStatus', optional(contentStatusEnumSchema)],
  verified: ['verified', optional(boolean())],
  verifiedInstant: ['verifiedInstant', optional(bigint())],
});
