/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { oneOf, Schema, validateAndMap } from '../../schema';
import {
  AppleIdentityProvider,
  appleIdentityProviderSchema,
} from '../appleIdentityProvider';
import {
  EpicGamesIdentityProvider,
  epicGamesIdentityProviderSchema,
} from '../epicGamesIdentityProvider';
import {
  ExternalJWTIdentityProvider,
  externalJWTIdentityProviderSchema,
} from '../externalJWTIdentityProvider';
import {
  FacebookIdentityProvider,
  facebookIdentityProviderSchema,
} from '../facebookIdentityProvider';
import {
  GoogleIdentityProvider,
  googleIdentityProviderSchema,
} from '../googleIdentityProvider';
import {
  HYPRIdentityProvider,
  hYPRIdentityProviderSchema,
} from '../hYPRIdentityProvider';
import {
  LinkedInIdentityProvider,
  linkedInIdentityProviderSchema,
} from '../linkedInIdentityProvider';
import {
  NintendoIdentityProvider,
  nintendoIdentityProviderSchema,
} from '../nintendoIdentityProvider';
import {
  OpenIdConnectIdentityProvider,
  openIdConnectIdentityProviderSchema,
} from '../openIdConnectIdentityProvider';
import {
  SAMLv2IdentityProvider,
  sAMLv2IdentityProviderSchema,
} from '../sAMLv2IdentityProvider';
import {
  SAMLv2IdPInitiatedIdentityProvider,
  sAMLv2IdPInitiatedIdentityProviderSchema,
} from '../sAMLv2IdPInitiatedIdentityProvider';
import {
  SonyPSNIdentityProvider,
  sonyPSNIdentityProviderSchema,
} from '../sonyPSNIdentityProvider';
import {
  SteamIdentityProvider,
  steamIdentityProviderSchema,
} from '../steamIdentityProvider';
import {
  TwitchIdentityProvider,
  twitchIdentityProviderSchema,
} from '../twitchIdentityProvider';
import {
  TwitterIdentityProvider,
  twitterIdentityProviderSchema,
} from '../twitterIdentityProvider';
import {
  XboxIdentityProvider,
  xboxIdentityProviderSchema,
} from '../xboxIdentityProvider';

/** This is a container type for one-of types. */
export type IdentityProviderField = AppleIdentityProvider | EpicGamesIdentityProvider | ExternalJWTIdentityProvider | FacebookIdentityProvider | GoogleIdentityProvider | HYPRIdentityProvider | LinkedInIdentityProvider | NintendoIdentityProvider | OpenIdConnectIdentityProvider | SAMLv2IdPInitiatedIdentityProvider | SAMLv2IdentityProvider | SonyPSNIdentityProvider | SteamIdentityProvider | TwitchIdentityProvider | TwitterIdentityProvider | XboxIdentityProvider;

const discriminatorMap = {
  'Apple': appleIdentityProviderSchema,
  'EpicGames': epicGamesIdentityProviderSchema,
  'ExternalJWT': externalJWTIdentityProviderSchema,
  'Facebook': facebookIdentityProviderSchema,
  'Google': googleIdentityProviderSchema,
  'HYPR': hYPRIdentityProviderSchema,
  'LinkedIn': linkedInIdentityProviderSchema,
  'Nintendo': nintendoIdentityProviderSchema,
  'OpenIdConnect': openIdConnectIdentityProviderSchema,
  'SAMLv2IdPInitiated': sAMLv2IdPInitiatedIdentityProviderSchema,
  'SAMLv2': sAMLv2IdentityProviderSchema,
  'SonyPSN': sonyPSNIdentityProviderSchema,
  'Steam': steamIdentityProviderSchema,
  'Twitch': twitchIdentityProviderSchema,
  'Twitter': twitterIdentityProviderSchema,
  'Xbox': xboxIdentityProviderSchema,
}

export const identityProviderFieldSchema: Schema<IdentityProviderField> = oneOf(
  [
    appleIdentityProviderSchema,
    epicGamesIdentityProviderSchema,
    externalJWTIdentityProviderSchema,
    facebookIdentityProviderSchema,
    googleIdentityProviderSchema,
    hYPRIdentityProviderSchema,
    linkedInIdentityProviderSchema,
    nintendoIdentityProviderSchema,
    openIdConnectIdentityProviderSchema,
    sAMLv2IdPInitiatedIdentityProviderSchema,
    sAMLv2IdentityProviderSchema,
    sonyPSNIdentityProviderSchema,
    steamIdentityProviderSchema,
    twitchIdentityProviderSchema,
    twitterIdentityProviderSchema,
    xboxIdentityProviderSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace IdentityProviderField {
  /**
  * Validation method to narrow down union type to AppleIdentityProvider type case.
  *
  * This is AppleIdentityProvider case.
  */
  export function isAppleIdentityProvider(value: unknown): value is AppleIdentityProvider {
    const validationResult = validateAndMap(value, appleIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to EpicGamesIdentityProvider type case.
  *
  * This is EpicGamesIdentityProvider case.
  */
  export function isEpicGamesIdentityProvider(value: unknown): value is EpicGamesIdentityProvider {
    const validationResult = validateAndMap(value, epicGamesIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to ExternalJWTIdentityProvider type case.
  *
  * This is ExternalJWTIdentityProvider case.
  */
  export function isExternalJWTIdentityProvider(value: unknown): value is ExternalJWTIdentityProvider {
    const validationResult = validateAndMap(value, externalJWTIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to FacebookIdentityProvider type case.
  *
  * This is FacebookIdentityProvider case.
  */
  export function isFacebookIdentityProvider(value: unknown): value is FacebookIdentityProvider {
    const validationResult = validateAndMap(value, facebookIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to GoogleIdentityProvider type case.
  *
  * This is GoogleIdentityProvider case.
  */
  export function isGoogleIdentityProvider(value: unknown): value is GoogleIdentityProvider {
    const validationResult = validateAndMap(value, googleIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to HYPRIdentityProvider type case.
  *
  * This is HYPRIdentityProvider case.
  */
  export function isHYPRIdentityProvider(value: unknown): value is HYPRIdentityProvider {
    const validationResult = validateAndMap(value, hYPRIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to LinkedInIdentityProvider type case.
  *
  * This is LinkedInIdentityProvider case.
  */
  export function isLinkedInIdentityProvider(value: unknown): value is LinkedInIdentityProvider {
    const validationResult = validateAndMap(value, linkedInIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to NintendoIdentityProvider type case.
  *
  * This is NintendoIdentityProvider case.
  */
  export function isNintendoIdentityProvider(value: unknown): value is NintendoIdentityProvider {
    const validationResult = validateAndMap(value, nintendoIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to OpenIdConnectIdentityProvider type case.
  *
  * This is OpenIdConnectIdentityProvider case.
  */
  export function isOpenIdConnectIdentityProvider(value: unknown): value is OpenIdConnectIdentityProvider {
    const validationResult = validateAndMap(value, openIdConnectIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SAMLv2IdPInitiatedIdentityProvider type case.
  *
  * This is SAMLv2IdPInitiatedIdentityProvider case.
  */
  export function isSAMLv2IdPInitiatedIdentityProvider(value: unknown): value is SAMLv2IdPInitiatedIdentityProvider {
    const validationResult = validateAndMap(value, sAMLv2IdPInitiatedIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SAMLv2IdentityProvider type case.
  *
  * This is SAMLv2IdentityProvider case.
  */
  export function isSAMLv2IdentityProvider(value: unknown): value is SAMLv2IdentityProvider {
    const validationResult = validateAndMap(value, sAMLv2IdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SonyPSNIdentityProvider type case.
  *
  * This is SonyPSNIdentityProvider case.
  */
  export function isSonyPSNIdentityProvider(value: unknown): value is SonyPSNIdentityProvider {
    const validationResult = validateAndMap(value, sonyPSNIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to SteamIdentityProvider type case.
  *
  * This is SteamIdentityProvider case.
  */
  export function isSteamIdentityProvider(value: unknown): value is SteamIdentityProvider {
    const validationResult = validateAndMap(value, steamIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TwitchIdentityProvider type case.
  *
  * This is TwitchIdentityProvider case.
  */
  export function isTwitchIdentityProvider(value: unknown): value is TwitchIdentityProvider {
    const validationResult = validateAndMap(value, twitchIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to TwitterIdentityProvider type case.
  *
  * This is TwitterIdentityProvider case.
  */
  export function isTwitterIdentityProvider(value: unknown): value is TwitterIdentityProvider {
    const validationResult = validateAndMap(value, twitterIdentityProviderSchema);
    return validationResult.errors === false;
  }

  /**
  * Validation method to narrow down union type to XboxIdentityProvider type case.
  *
  * This is XboxIdentityProvider case.
  */
  export function isXboxIdentityProvider(value: unknown): value is XboxIdentityProvider {
    const validationResult = validateAndMap(value, xboxIdentityProviderSchema);
    return validationResult.errors === false;
  }
}
