/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  WebhookSignatureConfiguration,
  webhookSignatureConfigurationSchema,
} from './webhookSignatureConfiguration';

/** A server where events are sent. This includes user action events and any other events sent by FusionAuth. */
export interface Webhook {
  connectTimeout?: number;
  data?: Record<string, unknown>;
  description?: string;
  eventsEnabled?: Record<string, boolean>;
  global?: boolean;
  /** Type for webhook headers. */
  headers?: unknown;
  httpAuthenticationPassword?: string;
  httpAuthenticationUsername?: string;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUpdateInstant?: bigint;
  readTimeout?: number;
  /** Configuration for signing webhooks. */
  signatureConfiguration?: WebhookSignatureConfiguration;
  sslCertificate?: string;
  sslCertificateKeyId?: string;
  tenantIds?: string[];
  url?: string;
}

export const webhookSchema: Schema<Webhook> = object({
  connectTimeout: ['connectTimeout', optional(number())],
  data: ['data', optional(dict(unknown()))],
  description: ['description', optional(string())],
  eventsEnabled: ['eventsEnabled', optional(dict(boolean()))],
  global: ['global', optional(boolean())],
  headers: ['headers', optional(unknown())],
  httpAuthenticationPassword: [
    'httpAuthenticationPassword',
    optional(string()),
  ],
  httpAuthenticationUsername: [
    'httpAuthenticationUsername',
    optional(string()),
  ],
  id: ['id', optional(string())],
  insertInstant: ['insertInstant', optional(bigint())],
  lastUpdateInstant: ['lastUpdateInstant', optional(bigint())],
  readTimeout: ['readTimeout', optional(number())],
  signatureConfiguration: [
    'signatureConfiguration',
    optional(lazy(() => webhookSignatureConfigurationSchema)),
  ],
  sslCertificate: ['sslCertificate', optional(string())],
  sslCertificateKeyId: ['sslCertificateKeyId', optional(string())],
  tenantIds: ['tenantIds', optional(array(string()))],
  url: ['url', optional(string())],
});
