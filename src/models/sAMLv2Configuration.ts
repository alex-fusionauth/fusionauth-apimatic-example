/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  CanonicalizationMethodEnum,
  canonicalizationMethodEnumSchema,
} from './canonicalizationMethodEnum';
import {
  LoginHintConfiguration,
  loginHintConfigurationSchema,
} from './loginHintConfiguration';
import {
  SAMLv2AssertionEncryptionConfiguration,
  sAMLv2AssertionEncryptionConfigurationSchema,
} from './sAMLv2AssertionEncryptionConfiguration';
import {
  SAMLv2IdPInitiatedLoginConfiguration,
  sAMLv2IdPInitiatedLoginConfigurationSchema,
} from './sAMLv2IdPInitiatedLoginConfiguration';
import { SAMLv2Logout, sAMLv2LogoutSchema } from './sAMLv2Logout';
import {
  XMLSignatureLocationEnum,
  xMLSignatureLocationEnumSchema,
} from './xMLSignatureLocationEnum';

export interface SAMLv2Configuration {
  assertionEncryptionConfiguration?: SAMLv2AssertionEncryptionConfiguration;
  audience?: string;
  authorizedRedirectURLs?: string[];
  debug?: boolean;
  defaultVerificationKeyId?: string;
  /** IdP Initiated login configuration */
  initiatedLogin?: SAMLv2IdPInitiatedLoginConfiguration;
  issuer?: string;
  keyId?: string;
  loginHintConfiguration?: LoginHintConfiguration;
  logout?: SAMLv2Logout;
  logoutURL?: string;
  requireSignedRequests?: boolean;
  /** XML canonicalization method enumeration. This is used for the IdP and SP side of FusionAuth SAML. */
  xmlSignatureC14nMethod?: CanonicalizationMethodEnum;
  xmlSignatureLocation?: XMLSignatureLocationEnum;
  callbackURL?: string;
  enabled?: boolean;
}

export const sAMLv2ConfigurationSchema: Schema<SAMLv2Configuration> = object({
  assertionEncryptionConfiguration: [
    'assertionEncryptionConfiguration',
    optional(lazy(() => sAMLv2AssertionEncryptionConfigurationSchema)),
  ],
  audience: ['audience', optional(string())],
  authorizedRedirectURLs: ['authorizedRedirectURLs', optional(array(string()))],
  debug: ['debug', optional(boolean())],
  defaultVerificationKeyId: ['defaultVerificationKeyId', optional(string())],
  initiatedLogin: [
    'initiatedLogin',
    optional(lazy(() => sAMLv2IdPInitiatedLoginConfigurationSchema)),
  ],
  issuer: ['issuer', optional(string())],
  keyId: ['keyId', optional(string())],
  loginHintConfiguration: [
    'loginHintConfiguration',
    optional(lazy(() => loginHintConfigurationSchema)),
  ],
  logout: ['logout', optional(lazy(() => sAMLv2LogoutSchema))],
  logoutURL: ['logoutURL', optional(string())],
  requireSignedRequests: ['requireSignedRequests', optional(boolean())],
  xmlSignatureC14nMethod: [
    'xmlSignatureC14nMethod',
    optional(canonicalizationMethodEnumSchema),
  ],
  xmlSignatureLocation: [
    'xmlSignatureLocation',
    optional(xMLSignatureLocationEnumSchema),
  ],
  callbackURL: ['callbackURL', optional(string())],
  enabled: ['enabled', optional(boolean())],
});
