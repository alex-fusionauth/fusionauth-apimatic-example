/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { EmailHeader, emailHeaderSchema } from './emailHeader';
import {
  EmailSecurityTypeEnum,
  emailSecurityTypeEnumSchema,
} from './emailSecurityTypeEnum';
import {
  EmailUnverifiedOptions,
  emailUnverifiedOptionsSchema,
} from './emailUnverifiedOptions';
import {
  VerificationStrategyEnum,
  verificationStrategyEnumSchema,
} from './verificationStrategyEnum';

export interface EmailConfiguration {
  additionalHeaders?: EmailHeader[];
  debug?: boolean;
  defaultFromEmail?: string;
  defaultFromName?: string;
  emailUpdateEmailTemplateId?: string;
  emailVerifiedEmailTemplateId?: string;
  forgotPasswordEmailTemplateId?: string;
  host?: string;
  implicitEmailVerificationAllowed?: boolean;
  loginIdInUseOnCreateEmailTemplateId?: string;
  loginIdInUseOnUpdateEmailTemplateId?: string;
  loginNewDeviceEmailTemplateId?: string;
  loginSuspiciousEmailTemplateId?: string;
  password?: string;
  passwordResetSuccessEmailTemplateId?: string;
  passwordUpdateEmailTemplateId?: string;
  passwordlessEmailTemplateId?: string;
  port?: number;
  properties?: string;
  security?: EmailSecurityTypeEnum;
  setPasswordEmailTemplateId?: string;
  twoFactorMethodAddEmailTemplateId?: string;
  twoFactorMethodRemoveEmailTemplateId?: string;
  unverified?: EmailUnverifiedOptions;
  username?: string;
  verificationEmailTemplateId?: string;
  verificationStrategy?: VerificationStrategyEnum;
  verifyEmail?: boolean;
  verifyEmailWhenChanged?: boolean;
}

export const emailConfigurationSchema: Schema<EmailConfiguration> = object({
  additionalHeaders: [
    'additionalHeaders',
    optional(array(lazy(() => emailHeaderSchema))),
  ],
  debug: ['debug', optional(boolean())],
  defaultFromEmail: ['defaultFromEmail', optional(string())],
  defaultFromName: ['defaultFromName', optional(string())],
  emailUpdateEmailTemplateId: [
    'emailUpdateEmailTemplateId',
    optional(string()),
  ],
  emailVerifiedEmailTemplateId: [
    'emailVerifiedEmailTemplateId',
    optional(string()),
  ],
  forgotPasswordEmailTemplateId: [
    'forgotPasswordEmailTemplateId',
    optional(string()),
  ],
  host: ['host', optional(string())],
  implicitEmailVerificationAllowed: [
    'implicitEmailVerificationAllowed',
    optional(boolean()),
  ],
  loginIdInUseOnCreateEmailTemplateId: [
    'loginIdInUseOnCreateEmailTemplateId',
    optional(string()),
  ],
  loginIdInUseOnUpdateEmailTemplateId: [
    'loginIdInUseOnUpdateEmailTemplateId',
    optional(string()),
  ],
  loginNewDeviceEmailTemplateId: [
    'loginNewDeviceEmailTemplateId',
    optional(string()),
  ],
  loginSuspiciousEmailTemplateId: [
    'loginSuspiciousEmailTemplateId',
    optional(string()),
  ],
  password: ['password', optional(string())],
  passwordResetSuccessEmailTemplateId: [
    'passwordResetSuccessEmailTemplateId',
    optional(string()),
  ],
  passwordUpdateEmailTemplateId: [
    'passwordUpdateEmailTemplateId',
    optional(string()),
  ],
  passwordlessEmailTemplateId: [
    'passwordlessEmailTemplateId',
    optional(string()),
  ],
  port: ['port', optional(number())],
  properties: ['properties', optional(string())],
  security: ['security', optional(emailSecurityTypeEnumSchema)],
  setPasswordEmailTemplateId: [
    'setPasswordEmailTemplateId',
    optional(string()),
  ],
  twoFactorMethodAddEmailTemplateId: [
    'twoFactorMethodAddEmailTemplateId',
    optional(string()),
  ],
  twoFactorMethodRemoveEmailTemplateId: [
    'twoFactorMethodRemoveEmailTemplateId',
    optional(string()),
  ],
  unverified: [
    'unverified',
    optional(lazy(() => emailUnverifiedOptionsSchema)),
  ],
  username: ['username', optional(string())],
  verificationEmailTemplateId: [
    'verificationEmailTemplateId',
    optional(string()),
  ],
  verificationStrategy: [
    'verificationStrategy',
    optional(verificationStrategyEnumSchema),
  ],
  verifyEmail: ['verifyEmail', optional(boolean())],
  verifyEmailWhenChanged: ['verifyEmailWhenChanged', optional(boolean())],
});
