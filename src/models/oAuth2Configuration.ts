/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  ClientAuthenticationPolicyEnum,
  clientAuthenticationPolicyEnumSchema,
} from './clientAuthenticationPolicyEnum';
import {
  LogoutBehaviorEnum,
  logoutBehaviorEnumSchema,
} from './logoutBehaviorEnum';
import {
  Oauth2AuthorizedURLValidationPolicyEnum,
  oauth2AuthorizedURLValidationPolicyEnumSchema,
} from './oauth2AuthorizedURLValidationPolicyEnum';
import {
  OAuthApplicationRelationshipEnum,
  oAuthApplicationRelationshipEnumSchema,
} from './oAuthApplicationRelationshipEnum';
import {
  OAuthScopeConsentModeEnum,
  oAuthScopeConsentModeEnumSchema,
} from './oAuthScopeConsentModeEnum';
import {
  OAuthScopeHandlingPolicyEnum,
  oAuthScopeHandlingPolicyEnumSchema,
} from './oAuthScopeHandlingPolicyEnum';
import {
  ProofKeyForCodeExchangePolicyEnum,
  proofKeyForCodeExchangePolicyEnumSchema,
} from './proofKeyForCodeExchangePolicyEnum';
import {
  ProvidedScopePolicy,
  providedScopePolicySchema,
} from './providedScopePolicy';
import {
  UnknownScopePolicyEnum,
  unknownScopePolicyEnumSchema,
} from './unknownScopePolicyEnum';

export interface OAuth2Configuration {
  authorizedOriginURLs?: string[];
  authorizedRedirectURLs?: string[];
  authorizedURLValidationPolicy?: Oauth2AuthorizedURLValidationPolicyEnum;
  clientAuthenticationPolicy?: ClientAuthenticationPolicyEnum;
  clientId?: string;
  clientSecret?: string;
  /** Controls the policy for requesting user permission to grant access to requested scopes during an OAuth workflow  for a third-party application. */
  consentMode?: OAuthScopeConsentModeEnum;
  debug?: boolean;
  deviceVerificationURL?: string;
  enabledGrants?: unknown[];
  generateRefreshTokens?: boolean;
  logoutBehavior?: LogoutBehaviorEnum;
  logoutURL?: string;
  proofKeyForCodeExchangePolicy?: ProofKeyForCodeExchangePolicyEnum;
  /** The handling policy for scopes provided by FusionAuth */
  providedScopePolicy?: ProvidedScopePolicy;
  /** The application's relationship to the authorization server. First-party applications will be granted implicit permission for requested scopes.  Third-party applications will use the {@link OAuthScopeConsentMode} policy. */
  relationship?: OAuthApplicationRelationshipEnum;
  requireClientAuthentication?: boolean;
  requireRegistration?: boolean;
  /** Controls the policy for whether OAuth workflows will more strictly adhere to the OAuth and OIDC specification  or run in backwards compatibility mode. */
  scopeHandlingPolicy?: OAuthScopeHandlingPolicyEnum;
  /** Policy for handling unknown OAuth scopes in the request */
  unknownScopePolicy?: UnknownScopePolicyEnum;
}

export const oAuth2ConfigurationSchema: Schema<OAuth2Configuration> = object({
  authorizedOriginURLs: ['authorizedOriginURLs', optional(array(string()))],
  authorizedRedirectURLs: ['authorizedRedirectURLs', optional(array(string()))],
  authorizedURLValidationPolicy: [
    'authorizedURLValidationPolicy',
    optional(oauth2AuthorizedURLValidationPolicyEnumSchema),
  ],
  clientAuthenticationPolicy: [
    'clientAuthenticationPolicy',
    optional(clientAuthenticationPolicyEnumSchema),
  ],
  clientId: ['clientId', optional(string())],
  clientSecret: ['clientSecret', optional(string())],
  consentMode: ['consentMode', optional(oAuthScopeConsentModeEnumSchema)],
  debug: ['debug', optional(boolean())],
  deviceVerificationURL: ['deviceVerificationURL', optional(string())],
  enabledGrants: ['enabledGrants', optional(array(unknown()))],
  generateRefreshTokens: ['generateRefreshTokens', optional(boolean())],
  logoutBehavior: ['logoutBehavior', optional(logoutBehaviorEnumSchema)],
  logoutURL: ['logoutURL', optional(string())],
  proofKeyForCodeExchangePolicy: [
    'proofKeyForCodeExchangePolicy',
    optional(proofKeyForCodeExchangePolicyEnumSchema),
  ],
  providedScopePolicy: [
    'providedScopePolicy',
    optional(lazy(() => providedScopePolicySchema)),
  ],
  relationship: [
    'relationship',
    optional(oAuthApplicationRelationshipEnumSchema),
  ],
  requireClientAuthentication: [
    'requireClientAuthentication',
    optional(boolean()),
  ],
  requireRegistration: ['requireRegistration', optional(boolean())],
  scopeHandlingPolicy: [
    'scopeHandlingPolicy',
    optional(oAuthScopeHandlingPolicyEnumSchema),
  ],
  unknownScopePolicy: [
    'unknownScopePolicy',
    optional(unknownScopePolicyEnumSchema),
  ],
});
