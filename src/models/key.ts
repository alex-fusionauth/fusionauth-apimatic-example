/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  bigint,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  CertificateInformation,
  certificateInformationSchema,
} from './certificateInformation';
import { KeyAlgorithmEnum, keyAlgorithmEnumSchema } from './keyAlgorithmEnum';
import { KeyTypeEnum, keyTypeEnumSchema } from './keyTypeEnum';

/** Domain for a public key, key pair or an HMAC secret. This is used by KeyMaster to manage keys for JWTs, SAML, etc. */
export interface Key {
  algorithm?: KeyAlgorithmEnum;
  certificate?: string;
  certificateInformation?: CertificateInformation;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  expirationInstant?: bigint;
  hasPrivateKey?: boolean;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  issuer?: string;
  kid?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUpdateInstant?: bigint;
  length?: number;
  name?: string;
  privateKey?: string;
  publicKey?: string;
  secret?: string;
  type?: KeyTypeEnum;
}

export const keySchema: Schema<Key> = object({
  algorithm: ['algorithm', optional(keyAlgorithmEnumSchema)],
  certificate: ['certificate', optional(string())],
  certificateInformation: [
    'certificateInformation',
    optional(lazy(() => certificateInformationSchema)),
  ],
  expirationInstant: ['expirationInstant', optional(bigint())],
  hasPrivateKey: ['hasPrivateKey', optional(boolean())],
  id: ['id', optional(string())],
  insertInstant: ['insertInstant', optional(bigint())],
  issuer: ['issuer', optional(string())],
  kid: ['kid', optional(string())],
  lastUpdateInstant: ['lastUpdateInstant', optional(bigint())],
  length: ['length', optional(number())],
  name: ['name', optional(string())],
  privateKey: ['privateKey', optional(string())],
  publicKey: ['publicKey', optional(string())],
  secret: ['secret', optional(string())],
  type: ['type', optional(keyTypeEnumSchema)],
});
