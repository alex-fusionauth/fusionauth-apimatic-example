/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, lazy, object, optional, Schema, string } from '../schema';
import { LoginIdTypeEnum, loginIdTypeEnumSchema } from './loginIdTypeEnum';
import {
  RegistrationTypeEnum,
  registrationTypeEnumSchema,
} from './registrationTypeEnum';
import { Requirable, requirableSchema } from './requirable';

export interface RegistrationConfiguration {
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  birthDate?: Requirable;
  confirmPassword?: boolean;
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  firstName?: Requirable;
  formId?: string;
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  fullName?: Requirable;
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  lastName?: Requirable;
  loginIdType?: LoginIdTypeEnum;
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  middleName?: Requirable;
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  mobilePhone?: Requirable;
  /** Something that can be required and thus also optional. This currently extends Enableable because anything that is  requiredoptional is almost always enableable as well. */
  preferredLanguages?: Requirable;
  type?: RegistrationTypeEnum;
  enabled?: boolean;
}

export const registrationConfigurationSchema: Schema<RegistrationConfiguration> = object(
  {
    birthDate: ['birthDate', optional(lazy(() => requirableSchema))],
    confirmPassword: ['confirmPassword', optional(boolean())],
    firstName: ['firstName', optional(lazy(() => requirableSchema))],
    formId: ['formId', optional(string())],
    fullName: ['fullName', optional(lazy(() => requirableSchema))],
    lastName: ['lastName', optional(lazy(() => requirableSchema))],
    loginIdType: ['loginIdType', optional(loginIdTypeEnumSchema)],
    middleName: ['middleName', optional(lazy(() => requirableSchema))],
    mobilePhone: ['mobilePhone', optional(lazy(() => requirableSchema))],
    preferredLanguages: [
      'preferredLanguages',
      optional(lazy(() => requirableSchema)),
    ],
    type: ['type', optional(registrationTypeEnumSchema)],
    enabled: ['enabled', optional(boolean())],
  }
);
