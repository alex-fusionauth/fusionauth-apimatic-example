/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  dict,
  lazy,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  CanonicalizationMethodEnum,
  canonicalizationMethodEnumSchema,
} from './canonicalizationMethodEnum';
import {
  IdentityProviderLinkingStrategyEnum,
  identityProviderLinkingStrategyEnumSchema,
} from './identityProviderLinkingStrategyEnum';
import {
  IdentityProviderTenantConfiguration,
  identityProviderTenantConfigurationSchema,
} from './identityProviderTenantConfiguration';
import {
  IdentityProviderTypeEnum,
  identityProviderTypeEnumSchema,
} from './identityProviderTypeEnum';
import {
  LoginHintConfiguration,
  loginHintConfigurationSchema,
} from './loginHintConfiguration';
import {
  ProviderLambdaConfiguration,
  providerLambdaConfigurationSchema,
} from './providerLambdaConfiguration';
import {
  SAMLv2ApplicationConfiguration,
  sAMLv2ApplicationConfigurationSchema,
} from './sAMLv2ApplicationConfiguration';
import {
  SAMLv2AssertionConfiguration,
  sAMLv2AssertionConfigurationSchema,
} from './sAMLv2AssertionConfiguration';
import {
  SAMLv2IdpInitiatedConfiguration,
  sAMLv2IdpInitiatedConfigurationSchema,
} from './sAMLv2IdpInitiatedConfiguration';

/** SAML v2 identity provider configuration. */
export interface SAMLv2IdentityProvider {
  domains?: unknown[];
  assertionConfiguration?: SAMLv2AssertionConfiguration;
  buttonImageURL?: string;
  buttonText?: string;
  idpEndpoint?: string;
  /** Config for regular SAML IDP configurations that support IdP initiated requests */
  idpInitiatedConfiguration?: SAMLv2IdpInitiatedConfiguration;
  issuer?: string;
  loginHintConfiguration?: LoginHintConfiguration;
  nameIdFormat?: string;
  postRequest?: boolean;
  requestSigningKeyId?: string;
  signRequest?: boolean;
  /** XML canonicalization method enumeration. This is used for the IdP and SP side of FusionAuth SAML. */
  xmlSignatureC14nMethod?: CanonicalizationMethodEnum;
  data?: Record<string, unknown>;
  applicationConfiguration?: Record<string, SAMLv2ApplicationConfiguration>;
  debug?: boolean;
  id?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  insertInstant?: bigint;
  lambdaConfiguration?: ProviderLambdaConfiguration;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  lastUpdateInstant?: bigint;
  /** The IdP behavior when no user link has been made yet. */
  linkingStrategy?: IdentityProviderLinkingStrategyEnum;
  name?: string;
  tenantConfiguration?: Record<string, IdentityProviderTenantConfiguration>;
  type: IdentityProviderTypeEnum;
  emailClaim?: string;
  keyId?: string;
  uniqueIdClaim?: string;
  useNameIdForEmail?: boolean;
  usernameClaim?: string;
}

export const sAMLv2IdentityProviderSchema: Schema<SAMLv2IdentityProvider> = object(
  {
    domains: ['domains', optional(array(unknown()))],
    assertionConfiguration: [
      'assertionConfiguration',
      optional(lazy(() => sAMLv2AssertionConfigurationSchema)),
    ],
    buttonImageURL: ['buttonImageURL', optional(string())],
    buttonText: ['buttonText', optional(string())],
    idpEndpoint: ['idpEndpoint', optional(string())],
    idpInitiatedConfiguration: [
      'idpInitiatedConfiguration',
      optional(lazy(() => sAMLv2IdpInitiatedConfigurationSchema)),
    ],
    issuer: ['issuer', optional(string())],
    loginHintConfiguration: [
      'loginHintConfiguration',
      optional(lazy(() => loginHintConfigurationSchema)),
    ],
    nameIdFormat: ['nameIdFormat', optional(string())],
    postRequest: ['postRequest', optional(boolean())],
    requestSigningKeyId: ['requestSigningKeyId', optional(string())],
    signRequest: ['signRequest', optional(boolean())],
    xmlSignatureC14nMethod: [
      'xmlSignatureC14nMethod',
      optional(canonicalizationMethodEnumSchema),
    ],
    data: ['data', optional(dict(unknown()))],
    applicationConfiguration: [
      'applicationConfiguration',
      optional(dict(lazy(() => sAMLv2ApplicationConfigurationSchema))),
    ],
    debug: ['debug', optional(boolean())],
    id: ['id', optional(string())],
    insertInstant: ['insertInstant', optional(bigint())],
    lambdaConfiguration: [
      'lambdaConfiguration',
      optional(lazy(() => providerLambdaConfigurationSchema)),
    ],
    lastUpdateInstant: ['lastUpdateInstant', optional(bigint())],
    linkingStrategy: [
      'linkingStrategy',
      optional(identityProviderLinkingStrategyEnumSchema),
    ],
    name: ['name', optional(string())],
    tenantConfiguration: [
      'tenantConfiguration',
      optional(dict(lazy(() => identityProviderTenantConfigurationSchema))),
    ],
    type: ['type', identityProviderTypeEnumSchema],
    emailClaim: ['emailClaim', optional(string())],
    keyId: ['keyId', optional(string())],
    uniqueIdClaim: ['uniqueIdClaim', optional(string())],
    useNameIdForEmail: ['useNameIdForEmail', optional(boolean())],
    usernameClaim: ['usernameClaim', optional(string())],
  }
);
