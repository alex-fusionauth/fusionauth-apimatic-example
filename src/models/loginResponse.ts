/**
 * FusionAuth APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  dict,
  lazy,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import {
  ChangePasswordReasonEnum,
  changePasswordReasonEnumSchema,
} from './changePasswordReasonEnum';
import {
  LoginPreventedResponse,
  loginPreventedResponseSchema,
} from './loginPreventedResponse';
import { TwoFactorMethod, twoFactorMethodSchema } from './twoFactorMethod';
import { User, userSchema } from './user';

export interface LoginResponse {
  actions?: LoginPreventedResponse[];
  changePasswordId?: string;
  changePasswordReason?: ChangePasswordReasonEnum;
  configurableMethods?: string[];
  emailVerificationId?: string;
  methods?: TwoFactorMethod[];
  pendingIdPLinkId?: string;
  refreshToken?: string;
  refreshTokenId?: string;
  registrationVerificationId?: string;
  state?: Record<string, unknown>;
  threatsDetected?: unknown[];
  token?: string;
  /** The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC. */
  tokenExpirationInstant?: bigint;
  trustToken?: string;
  twoFactorId?: string;
  twoFactorTrustId?: string;
  /** The global view of a User. This object contains all global information about the user including birthdate, registration information  preferred languages, global attributes, etc. */
  user?: User;
}

export const loginResponseSchema: Schema<LoginResponse> = object({
  actions: [
    'actions',
    optional(array(lazy(() => loginPreventedResponseSchema))),
  ],
  changePasswordId: ['changePasswordId', optional(string())],
  changePasswordReason: [
    'changePasswordReason',
    optional(changePasswordReasonEnumSchema),
  ],
  configurableMethods: ['configurableMethods', optional(array(string()))],
  emailVerificationId: ['emailVerificationId', optional(string())],
  methods: ['methods', optional(array(lazy(() => twoFactorMethodSchema)))],
  pendingIdPLinkId: ['pendingIdPLinkId', optional(string())],
  refreshToken: ['refreshToken', optional(string())],
  refreshTokenId: ['refreshTokenId', optional(string())],
  registrationVerificationId: [
    'registrationVerificationId',
    optional(string()),
  ],
  state: ['state', optional(dict(unknown()))],
  threatsDetected: ['threatsDetected', optional(array(unknown()))],
  token: ['token', optional(string())],
  tokenExpirationInstant: ['tokenExpirationInstant', optional(bigint())],
  trustToken: ['trustToken', optional(string())],
  twoFactorId: ['twoFactorId', optional(string())],
  twoFactorTrustId: ['twoFactorTrustId', optional(string())],
  user: ['user', optional(lazy(() => userSchema))],
});
